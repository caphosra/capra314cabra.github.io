<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Competitive Programming on caphosra note</title><link>https://caphosra.net/tags/competitive-programming/</link><description>Recent content in Competitive Programming on caphosra note</description><generator>Hugo</generator><language>ja</language><lastBuildDate>Sun, 07 Jan 2024 13:18:38 +0900</lastBuildDate><atom:link href="https://caphosra.net/tags/competitive-programming/index.xml" rel="self" type="application/rss+xml"/><item><title>[競プロ]役に立つCompareマクロ</title><link>https://caphosra.net/posts/comparemacro/</link><pubDate>Sun, 08 Dec 2019 22:24:27 +0900</pubDate><guid>https://caphosra.net/posts/comparemacro/</guid><description>&lt;h2 id="tldr">
 TL;DR
 &lt;a class="heading-link" href="#tldr">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>任意の方法で変数を比較する型を一行で作るためのマクロ&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define C(t, f) struct C##t { constexpr bool operator()(t const &amp;amp; a, t const &amp;amp; b) const noexcept { return f(a, b); } }
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>structの型名とマクロ名はお好みの名前に付け直してください。&lt;/p>
&lt;h2 id="マクロの説明">
 マクロの説明
 &lt;a class="heading-link" href="#%e3%83%9e%e3%82%af%e3%83%ad%e3%81%ae%e8%aa%ac%e6%98%8e">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>競技プログラミングで見かける&lt;code>greater&amp;lt;T&amp;gt;&lt;/code>と&lt;code>less&amp;lt;T&amp;gt;&lt;/code>という型。&lt;br>
この&lt;code>greater&amp;lt;T&amp;gt;&lt;/code>は大なり記号、&lt;code>less&amp;lt;T&amp;gt;&lt;/code>は小なり記号と同じ意味を持っています。&lt;br>
これらは、たとえば逆順のPriorityQueueを使うときに用いられます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// このPriorityQueueは小さい順に出てくる
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#aa89ea">priority_queue&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">vector&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">greater&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">pq&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// この二つは同じ動作をする
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#aa89ea">priority_queue&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">vector&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">less&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">pq&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">priority_queue&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">pq&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、これだけしかないと問題が生じます。&lt;br>
たとえば、&lt;code>pair&amp;lt;int, int&amp;gt;&lt;/code>型で&lt;code>second&lt;/code>の要素が小さい順に出すPriorityQueueが必要だとします。&lt;br>
この時に&lt;code>greater&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&lt;/code>だと&lt;code>first&lt;/code>の大小関係が優先され期待通りとなりません。&lt;/p>
&lt;p>ではどうすればよいか。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">struct&lt;/span> &lt;span style="color:#ca72ff">ComparePair&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">constexpr&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#00b1f7">operator&lt;/span>&lt;span style="color:#abb2bf">()(&lt;/span>&lt;span style="color:#aa89ea">pair&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#54b1c7">&amp;amp;&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">pair&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#54b1c7">&amp;amp;&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#76a9f9">noexcept&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">second&lt;/span> &lt;span style="color:#54b1c7">==&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">second&lt;/span>&lt;span style="color:#abb2bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">first&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">first&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">second&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">second&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上のように自前で比較をする型を作ればいいのです。
こうすれば、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 名前を簡略化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#8a93a5;font-style:italic">#define P pair&amp;lt;int, int&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// このように書けばsecondで順番が決定する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#aa89ea">priority_queue&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">P&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">vector&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">P&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">ComparePair&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">pq&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>secondが小さい順に値が出てきます。&lt;/p></description></item></channel></rss>