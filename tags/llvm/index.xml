<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>LLVM on caphosra note</title><link>https://caphosra.net/tags/llvm/</link><description>Recent content in LLVM on caphosra note</description><generator>Hugo</generator><language>ja</language><lastBuildDate>Sun, 07 Jan 2024 13:58:55 +0900</lastBuildDate><atom:link href="https://caphosra.net/tags/llvm/index.xml" rel="self" type="application/rss+xml"/><item><title>自作言語を作るまでに使えるツールたち</title><link>https://caphosra.net/posts/2020-10-03-original-language/</link><pubDate>Sat, 03 Oct 2020 21:36:42 +0900</pubDate><guid>https://caphosra.net/posts/2020-10-03-original-language/</guid><description>&lt;p>遂に、自作言語kaprinoが無事完成したのでその記念に、自作言語を実装するにあたって
使った物をこの記事で紹介したいと思います。実際に自作言語を作ろうと思っても
何から手を付けていいのか分からなくなってしまうことがあることは想像に難くないので、
その様な人への羅針盤のような記事になることを期待しています。&lt;br>
ただ、それぞれの使い方まで言及すると記事の量がどえらい事になるので、使い方はいずれ書こうと思います。&lt;/p>
&lt;p>これから自作言語作る予定がある方は必見です!&lt;br>
もう既に自作言語を実装した経験がある方は&lt;del>お手柔らかにお願いします。&lt;/del>&lt;/p>
&lt;p>自作言語kaprinoのソースコードを管理しているrepositoryへのリンクと自作のオンラインコンパイラ(この話はまた別の記事で)です。もし良かったら見てみてください。&lt;br>
&lt;a href="https://github.com/kaprino-lang/kaprino" class="external-link" target="_blank" rel="noopener">Github kaprino-lang&lt;/a>&lt;br>
&lt;a href="https://kaprino-lang.github.io/online/" class="external-link" target="_blank" rel="noopener">Kaprino Online Compiler&lt;/a>&lt;/p>
&lt;h2 id="まず自作言語を何故作ろうと思ったのか">
 まず自作言語を何故作ろうと思ったのか
 &lt;a class="heading-link" href="#%e3%81%be%e3%81%9a%e8%87%aa%e4%bd%9c%e8%a8%80%e8%aa%9e%e3%82%92%e4%bd%95%e6%95%85%e4%bd%9c%e3%82%8d%e3%81%86%e3%81%a8%e6%80%9d%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;del>なぜでしょうね。&lt;/del>&lt;br>
自作言語を作る人がよく言うのは、使っている既存の言語に不満があって自分の好みにあった言語を作ってみたい、という感じでしょうが、
私が自作言語を作ろうと思った理由は、本当になんとなくです。自作言語という言葉の響きによるものだと言えるかもしれませんし、
単純に自分は気付いていないだけで言語に不満があったのかもしれません。&lt;br>
これは本題ではないのでこれくらいにしておきます。&lt;/p>
&lt;h2 id="言語を動かすまでを大雑把に把握">
 言語を動かすまでを大雑把に把握
 &lt;a class="heading-link" href="#%e8%a8%80%e8%aa%9e%e3%82%92%e5%8b%95%e3%81%8b%e3%81%99%e3%81%be%e3%81%a7%e3%82%92%e5%a4%a7%e9%9b%91%e6%8a%8a%e3%81%ab%e6%8a%8a%e6%8f%a1">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>さて本題に入りましょう。&lt;br>
これから言語を作るまでに使ったものを紹介してゆく訳ですが、そもそも私の自作言語kaprinoが
どのように動いているか説明したいと思います。&lt;/p>
&lt;p>まず、kaprinoは静的な型付けの言語で、実行前にコンパイルを必要とします。&lt;br>
&lt;strong>コンパイル&lt;/strong> とはソースコードを機械語に変換することです。このコンパイルは通常、以下の様な作業を行います。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Lexer&lt;/strong> (字句解析器) と呼ばれるものでソースコードを &lt;strong>Token&lt;/strong> (小さい文字列)に分解&lt;/li>
&lt;li>&lt;strong>Parser&lt;/strong> (構文解析器) と呼ばれるものでTokenを &lt;strong>AST&lt;/strong> (抽象構文木)に変換&lt;/li>
&lt;li>ASTを低級言語(機械語やアセンブリ言語)に変換&lt;/li>
&lt;/ol>
&lt;p>ということはこの三つを行うプログラムを書くことが出来れば自作言語のコンパイラを手にする事ができます!&lt;/p>
&lt;p>しかし、愚直にこれらを一から実装すると途轍もない時間がかかります。そこでライブラリを使って実装していくことになります。&lt;/p>
&lt;p>&lt;strong>以下、C++で書くことを前提として話を進めます&lt;/strong>&lt;br>
C#とかJavaとかRustとかでもいいんですがそれらは&lt;del>記事の対象外ということで&lt;/del>&lt;/p>
&lt;h2 id="1-lexerを実装する">
 1. Lexerを実装する
 &lt;a class="heading-link" href="#1-lexer%e3%82%92%e5%ae%9f%e8%a3%85%e3%81%99%e3%82%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Lexerはこれから行う3つの事の中では最も簡単に実装ができます。自力実装もそこまで難しくないです。&lt;br>
しかし、今回のテーマはツール紹介ということなので自力でやりたいよ、という方は無視します。&lt;br>
&lt;del>頑張って下さい。応援しています。&lt;/del>&lt;/p>
&lt;p>LexerをC++で実装する時に使われる有名なツール(ライブラリ)として挙げられるのはこの三つです。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>lex&lt;/strong> (伝統的)&lt;/li>
&lt;li>&lt;strong>flex&lt;/strong> (再構築されたlex)&lt;/li>
&lt;li>&lt;strong>Antlr4&lt;/strong> (新勢力)&lt;/li>
&lt;/ul>
&lt;p>flexはlexと構文がほとんど同じなので、lexを使うくらいならより新しいflexを使ったほうがいいと思います。&lt;br>
flexとAntlr4について言えば、どちらを選んでも困ることは起こらないので、それぞれ検索してみて、サンプルコードにシンパシーを感じた方を使えばいいと思います。&lt;/p>
&lt;p>個人的にはAntlr4で書いた方が読みやすいと思ったので、kaprinoにもAntlr4を使っています。&lt;/p>
&lt;h2 id="2-parserを実装する">
 2. Parserを実装する
 &lt;a class="heading-link" href="#2-parser%e3%82%92%e5%ae%9f%e8%a3%85%e3%81%99%e3%82%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>ParserをC++で実装する時に使われる有名なツール(ライブラリ)として挙げられるのはこの三つです。&lt;/p></description></item><item><title>[LLVM] CreateGlobalStringPtrがクラッシュするときの対処法</title><link>https://caphosra.net/posts/2020-05-02-llvm-string-ptr/</link><pubDate>Sat, 02 May 2020 06:12:01 +0900</pubDate><guid>https://caphosra.net/posts/2020-05-02-llvm-string-ptr/</guid><description>&lt;p>CreateGlobalStringPtrをif文のブロックの中で失敗したので、それを解決する方法をご紹介します。&lt;/p>
&lt;h2 id="発生したエラー">
 発生したエラー
 &lt;a class="heading-link" href="#%e7%99%ba%e7%94%9f%e3%81%97%e3%81%9f%e3%82%a8%e3%83%a9%e3%83%bc">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>先ずは愚直にif文を実装していきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">ifblock&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getContext&lt;/span>&lt;span style="color:#abb2bf">(),&lt;/span> &lt;span style="color:#98c379">&amp;#34;then&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">mergeblock&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getContext&lt;/span>&lt;span style="color:#abb2bf">(),&lt;/span> &lt;span style="color:#98c379">&amp;#34;merged&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ブランチの分かれた部分と合流部分ですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">CreateCondBr&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">match&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">ifblock&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">mergeblock&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">SetInsertPoint&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">ifblock&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">strptr&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">CreateGlobalStringPtr&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// ERROR !
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">CreateBr&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">mergeblock&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>その後でブランチを組込んで、if文の中に&lt;code>SetInsertPoint&lt;/code>してから、&amp;ldquo;Hello World&amp;quot;という文字列をグローバル空間に確保してポインターを取得します。&lt;br>
この際、期待通りの動作であればグローバル空間に&amp;quot;Hello World&amp;quot;と書き込んでから、そのポインターを取得するという操作になります。&lt;br>
今、適当な関数の中のBasicBlockで、この操作を行ったものと仮定すれば、以下のようなコードとほぼ同等なはずです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#e5c07b">char&lt;/span>&lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#aa89ea">str&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#00b1f7">somefunc&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#aa89ea">match&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">match&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// Create global string poiter and it points &amp;#34;HelloWorld&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">strptr&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">str&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、このコードは失敗してしまいます。なぜでしょうか。&lt;/p>
&lt;h2 id="basicblockの親の関数に注意">
 BasicBlockの親の関数に注意!
 &lt;a class="heading-link" href="#basicblock%e3%81%ae%e8%a6%aa%e3%81%ae%e9%96%a2%e6%95%b0%e3%81%ab%e6%b3%a8%e6%84%8f">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>鋭い方はもうお気づきでしょうが、(私は全く鋭くないので気づくのに2時間かかりました)&lt;br>
&lt;code>ifblock&lt;/code>と&lt;code>mergeblock&lt;/code>の親の関数が指定されていません。&lt;code>BasicBlock::Create&lt;/code>は親の関数を指定しなくても使えるので、意外と気づかないではまってしまいました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">LLVMContext&lt;/span> &lt;span style="color:#54b1c7">&amp;amp;&lt;/span>&lt;span style="color:#aa89ea">Context&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#aa89ea">Twine&lt;/span> &lt;span style="color:#54b1c7">&amp;amp;&lt;/span>&lt;span style="color:#aa89ea">Name&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">Function&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span>&lt;span style="color:#aa89ea">Parent&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#76a9f9">nullptr&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">BasicBlock&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span>&lt;span style="color:#aa89ea">InsertBefore&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#76a9f9">nullptr&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://llvm.org/doxygen/classllvm_1_1BasicBlock.html" class="external-link" target="_blank" rel="noopener">llvm::BasicBlock Class Reference&lt;/a>&lt;/p>
&lt;p>親の関数を指定していなくても様々な操作をできるのですが、&lt;code>CreateGlobalStringPtr&lt;/code>を呼び出すには関数とBasicBlockが必要条件なので実行に失敗していたわけです。&lt;/p>
&lt;p>ということで纏めると、親の関数を指定しないと&lt;code>CreateGlobalStringPtr&lt;/code>は呼び出せないよ、ということです。&lt;/p>
&lt;h2 id="おまけ-現在挿入中の関数を取得する">
 [おまけ] 現在挿入中の関数を取得する
 &lt;a class="heading-link" href="#%e3%81%8a%e3%81%be%e3%81%91-%e7%8f%be%e5%9c%a8%e6%8c%bf%e5%85%a5%e4%b8%ad%e3%81%ae%e9%96%a2%e6%95%b0%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>現在のBasicBlockを取得してからその親の関数を取得すれば実現可能です。
BasicBlockを一度介すのがミソです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">parent&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">GetInsertBlock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getParent&lt;/span>&lt;span style="color:#abb2bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを使用すれば、以下の様に書き換えて先程のコードを動かすことができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">ifblock&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getContext&lt;/span>&lt;span style="color:#abb2bf">(),&lt;/span> &lt;span style="color:#98c379">&amp;#34;then&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">parent&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">mergeblock&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getContext&lt;/span>&lt;span style="color:#abb2bf">(),&lt;/span> &lt;span style="color:#98c379">&amp;#34;merged&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">parent&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="さいごに">
 さいごに
 &lt;a class="heading-link" href="#%e3%81%95%e3%81%84%e3%81%94%e3%81%ab">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>これだけは言いたい。LLVMの日本語資料少なすぎー! &lt;del>(英語読めよ)&lt;/del>&lt;br>
まあ、これがLLVMの記事をかく原動力になっているのですが。&lt;/p></description></item><item><title>[LLVM] printfでFloat型の足し算の結果を表示する</title><link>https://caphosra.net/posts/2020-04-09-llvm-printf-float/</link><pubDate>Thu, 09 Apr 2020 13:06:28 +0900</pubDate><guid>https://caphosra.net/posts/2020-04-09-llvm-printf-float/</guid><description>&lt;p>LLVMのC++ APIを使用して、printfでFloat同士の足し算の結果を表示するLLVM IRを表示するまでを行いたいと思います。&lt;/p>
&lt;h2 id="筆者の環境">
 筆者の環境
 &lt;a class="heading-link" href="#%e7%ad%86%e8%80%85%e3%81%ae%e7%92%b0%e5%a2%83">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>LLVM: LLVM 9.0.1&lt;/li>
&lt;li>Compiler: Visual Studio付属のcl.exe&lt;/li>
&lt;/ul>
&lt;h2 id="こんなコードを出力したい">
 こんなコードを出力したい
 &lt;a class="heading-link" href="#%e3%81%93%e3%82%93%e3%81%aa%e3%82%b3%e3%83%bc%e3%83%89%e3%82%92%e5%87%ba%e5%8a%9b%e3%81%97%e3%81%9f%e3%81%84">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>以下のC言語のプログラムと同じ動きをするLLVM IRを出力するのが今回の目標です。&lt;br>
floatの値を2つ足し算をしてprintfですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#include&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8a93a5;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#aa89ea">f1&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">3.5&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#aa89ea">f2&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">6.4&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00b1f7">printf&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;%f + %f = %f&lt;/span>&lt;span style="color:#d26464;font-weight:bold">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">f1&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">f2&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">f1&lt;/span> &lt;span style="color:#54b1c7">+&lt;/span> &lt;span style="color:#aa89ea">f2&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="まずはprintfを定義しよう">
 まずはprintfを定義しよう
 &lt;a class="heading-link" href="#%e3%81%be%e3%81%9a%e3%81%afprintf%e3%82%92%e5%ae%9a%e7%be%a9%e3%81%97%e3%82%88%e3%81%86">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>まず、printfの定義について思い出してみましょう。&lt;br>
printfは関数の引数として、フォーマットの文字列と、複数の値をとることができます。&lt;br>
戻り値はInt32型で帰ってきます。(私は戻り値を使ったことがあまりないです。)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#00b1f7">printf&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#e5c07b">char&lt;/span>&lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#aa89ea">format&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#abb2bf">...);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>それではC++のコードで実装していきます。&lt;br>
まず、LLVMのサポートClassを初期化していきましょう。&lt;br>
Builderが大文字なのは、LLVMの公式Tutorialで大文字になっていたので、それに慣れてしまったからです。変数名は勿論変えていただいて問題ありません。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">LLVMContext&lt;/span> &lt;span style="color:#aa89ea">context&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">IRBuilder&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">Builder&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">context&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Module&lt;/span>&lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">module&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Module&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;test.ll&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">context&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これからいちいち型を定義するのは大変なので、基本的な型はマクロとして簡単にかける様にしておきます。これは本当に我流なのでこのマクロを定義するのが一般的だと思い込まないでください&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define LLVM_INT8_PTR_TY llvm::Type::getInt8PtrTy(context)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define LLVM_INT32_TY llvm::Type::getInt32Ty(context)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define LLVM_FLOAT_TY llvm::Type::getFloatTy(context)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define LLVM_DOUBLE_TY llvm::Type::getDoubleTy(context)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで前準備は終了です。printfの定義に移っていきましょう。&lt;br>
まずは関数の&amp;quot;型&amp;quot;を定義します。戻り値の型とvectorに詰めた引数の型を&lt;code>llvm::FunctionType::get&lt;/code>に投げて、関数の型を受け取ります。&lt;br>
Int8型(Char型)のポインターを引数にして、戻り値をInt32型で返します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">std&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">vector&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Type&lt;/span>&lt;span style="color:#54b1c7">*&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">printfFuncArgs&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">printfFuncArgs&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">push_back&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">LLVM_INT8_PTR_TY&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">printfFuncType&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">FunctionType&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">get&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">LLVM_INT32_TY&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">printfFuncArgs&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>続けてprintf本体を作成しましょう。以下のようになります。&lt;/p></description></item><item><title>LLVMをWindowsで使いたくて入れたらlliなかった話</title><link>https://caphosra.net/posts/llvm-lli-install/</link><pubDate>Sat, 07 Mar 2020 12:54:53 +0900</pubDate><guid>https://caphosra.net/posts/llvm-lli-install/</guid><description>&lt;img src="https://llvm.org/img/LLVM-Logo-Derivative-1.png" alt="LLVM logo" class="center" width="256" height="256" />
&lt;p>オレオレ言語を作るためにAntlr4を習得(?)したcapra314cabraです。&lt;br>
今回は自分のWindowsのパソコンにLLVMを使える環境を作ろうとして手こずったのでそれの事について書いていきたいと思います。&lt;/p>
&lt;h2 id="まずllvmって">
 まずLLVMって?
 &lt;a class="heading-link" href="#%e3%81%be%e3%81%9allvm%e3%81%a3%e3%81%a6">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>The LLVM compiler infrastructure project is a set of compiler and toolchain technologies, which can be used to develop a front end for any programming language and a back end for any instruction set architecture.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/LLVM" class="external-link" target="_blank" rel="noopener">wikipedia LLVM&lt;/a>&lt;/p>
&lt;p>そういうことらしいです。LLVMのツール群の使い方は触れない予定なので、&lt;del>他のサイトをご覧下さい。&lt;/del>&lt;/p>
&lt;h2 id="最初にやったこと失敗談">
 最初にやったこと(失敗談)
 &lt;a class="heading-link" href="#%e6%9c%80%e5%88%9d%e3%81%ab%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8%e5%a4%b1%e6%95%97%e8%ab%87">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>取り敢えず、思考停止で&lt;a href="http://releases.llvm.org/download.html" class="external-link" target="_blank" rel="noopener">LLVMのリリースページ&lt;/a>へ&lt;br>
現時点でLLVM9.0.1が最新ですが、Pre-Built Binariesの何もなかったので、LLVM9.0.0のところにある&lt;code>Windows (64-bit)&lt;/code>をポチっとしてダウンロード。
インストラーだったので実行してインストール完了!&lt;/p>
&lt;p>&amp;hellip;と思いきや、Clang等はインストールされていたものの、&lt;code>lli&lt;/code>や&lt;code>llc&lt;/code>、&lt;code>llvm-as&lt;/code>などが見当たりませんでした。&lt;/p>
&lt;h2 id="次にやったこと失敗談">
 次にやったこと(失敗談)
 &lt;a class="heading-link" href="#%e6%ac%a1%e3%81%ab%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8%e5%a4%b1%e6%95%97%e8%ab%87">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Chocolatery(Windows用のパッケージマネージャ)を使ってLLVMを入れれば全部のせになるかな、という希望的観測でやってみると、ひとつ前と全く同じ&amp;hellip;&lt;/p>
&lt;h2 id="他の人がビルドしているものを貰う止めた">
 他の人がビルドしているものを貰う(止めた)
 &lt;a class="heading-link" href="#%e4%bb%96%e3%81%ae%e4%ba%ba%e3%81%8c%e3%83%93%e3%83%ab%e3%83%89%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b%e3%82%82%e3%81%ae%e3%82%92%e8%b2%b0%e3%81%86%e6%ad%a2%e3%82%81%e3%81%9f">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>古いのばかり出てきました(LLVM3が多い印象)&lt;br>
LLVM9.0.0が使いたいのでうーん、といった感じ&lt;/p></description></item></channel></rss>