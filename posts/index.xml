<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on caphosra note</title><link>https://caphosra.net/posts/</link><description>Recent content in Posts on caphosra note</description><generator>Hugo</generator><language>ja</language><lastBuildDate>Fri, 06 Dec 2024 18:11:55 +0900</lastBuildDate><atom:link href="https://caphosra.net/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Lean4と戯れるのに役に立ったもの</title><link>https://caphosra.net/posts/2024-12-06-lean4-tips/</link><pubDate>Fri, 06 Dec 2024 07:51:57 +0900</pubDate><guid>https://caphosra.net/posts/2024-12-06-lean4-tips/</guid><description>&lt;p>この記事は, &lt;a href="https://adventar.org/calendars/10445" class="external-link" target="_blank" rel="noopener">理情 Advent Calendar 2024&lt;/a>の12/6の記事です. この文章を読むのに飽きたら是非他の人の書いた記事を読んでみてください.&lt;/p>
&lt;h2 id="はじめに">
 はじめに
 &lt;a class="heading-link" href="#%e3%81%af%e3%81%98%e3%82%81%e3%81%ab">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>今年4月ごろに, 元から興味を持っていたプログラミング言語もとい定理証明支援系のLean4に満を持して入門しました.&lt;/p>
&lt;p>しかしながら, 単に情報がないからなのか自分の検索能力が低いからなのか, 普通に手元では証明できているのにLean4にどのように書き下せばいいのかわからない場面が何度もあったので, この記事では初心者なりにかなり便利でもっと早く知っておきたかったいくつかのトピックを, 少しでも証明を楽しむためのヒントとして記したいと思います. かなり雑多だと思うのですが, どうかお付き合いください.&lt;/p>
&lt;p>注意点として, Lean4の公式の &lt;a href="https://leanprover.github.io/theorem_proving_in_lean4/" class="external-link" target="_blank" rel="noopener">Theorem Proving in Lean 4&lt;/a> に載っている内容はこの記事では基本省略してあるので, 基本的な使い方を習得するのにはこの記事は向かないと思います.&lt;/p>
&lt;p>また, 直観論理の世界から抜け出したくない方には申し訳ないのですがこの記事では古典論理を前提としており, 断りなく&lt;code>open Classical&lt;/code>されていることを仮定しています.&lt;/p>
&lt;h2 id="1-lean-4-vscode-extension">
 1. Lean 4 VSCode Extension
 &lt;a class="heading-link" href="#1-lean-4-vscode-extension">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>かなり当たり前かもしれませんが, この拡張を入れるとLean4のsyntax highlightingや入力予測がされるようになります. それだけでなく, 現在の証明の流れがとても掴みやすくなるInfoViewが見れるようになります.&lt;/p>
&lt;p>&lt;img alt="Lean4 info view screenshot" src="https://caphosra.net/images/2024-12-06/lean4_screenshot1.jpg">&lt;/p>
&lt;p>左に書かれているのがLean4の証明で, 右がその様子をわかりやすく表示してくれるInfoViewです. 写真では119行目にカーソルが合っているので119行目における証明の進行状況が表示されています.&lt;/p>
&lt;p>&lt;img alt="Lean4 info view screenshot" src="https://caphosra.net/images/2024-12-06/lean4_screenshot2.jpg">&lt;/p>
&lt;p>このviewの見方をざっと解説します.&lt;/p>
&lt;p>まず, 画像でオレンジ色で表示されているのが, すでに導入された命題のリストです. 仮定として証明に使って良い名前付けされた命題が並んでいます. Curry-Howard同型対応と呼ばれる, ざっくりといえば関数と型はそれぞれ証明と命題に対応するという対応関係から, 現在のスコープにある変数とその型であるとみることもできます.&lt;/p>
&lt;p>次に画像で一番下に表示されているのが, この証明のゴール, つまり示すべきものです. このゴールは, 必ずしもある定理の証明をする間ずっと同じというわけでもなく, 場合分けの途中や補題の証明中などに変わることもあるので, 今自分が何を示そうとしているのか意識するためにも常に把握しておきましょう.&lt;/p></description></item><item><title>[CTF] SECCON 13 Quals writeup</title><link>https://caphosra.net/posts/2024-11-25-seccon-13-q/</link><pubDate>Mon, 25 Nov 2024 22:33:41 +0900</pubDate><guid>https://caphosra.net/posts/2024-11-25-seccon-13-q/</guid><description>&lt;p>caphosraです. SECCON 13 QualsにTSGで参加しました. 結果は国内7位ということで決勝には進めそうです. 本当にチームメンバーが凄すぎる.&lt;/p>
&lt;p>自分はpwnのParagraphとrevのpackedを解きました. 記録上はrevのJumpも解いたことになっていますが, 雑にフラグをguessしただけなので&amp;quot;解けた&amp;quot;ことにしていいものか&amp;hellip;? どうguessしたかは書きます.&lt;/p>
&lt;h2 id="rev-packed-93pt-119teams">
 rev: packed (93pt, 119teams)
 &lt;a class="heading-link" href="#rev-packed-93pt-119teams">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>gdbをアタッチして手動で前から実行していくと, 入力文字列をある2つのバイト列とxorして0になるかどうかを判定していることがわかる. xorの性質から&lt;code>(a xor b) xor c == 0&lt;/code>は&lt;code>a == b xor c&lt;/code>なので, この2つのバイト列のxorをとってあげれば良い.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">a&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">0xe8&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x4a&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x0&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x0&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x0&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x83&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xf9&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x49&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x75&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x44&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x53&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x57&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x48&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x8d&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x4c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x37&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xfd&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x5e&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x56&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x5b&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xeb&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x2f&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x48&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x39&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xce&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x73&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x32&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x56&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x5e&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xac&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x3c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x80&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x72&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xa&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x3c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x8f&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x77&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x6&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x80&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x7e&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xfe&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xf&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x74&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x6&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x2c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xe8&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x3c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x1&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">b&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">0xbb&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xf&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x43&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x43&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x4f&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xcd&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x82&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x1c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x25&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x1c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xc&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x24&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x7f&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xf8&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x2e&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x68&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xcc&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x2d&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x9&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x3a&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xb4&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x48&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x78&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x56&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xaa&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x2c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x42&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x3a&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x6a&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xcf&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xf&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xdf&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x14&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x3a&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x4e&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xd0&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x1f&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x37&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xe4&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x17&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x90&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x39&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x2b&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x65&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x1c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x8c&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0xf&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">0x7c&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">text&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#63c381">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">len&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">)):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">text&lt;/span> &lt;span style="color:#54b1c7">+=&lt;/span> &lt;span style="color:#e5c07b">chr&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span> &lt;span style="color:#54b1c7">^&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">text&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>FLAG: &lt;code>SECCON{UPX_s7ub_1s_a_g0od_pl4c3_f0r_h1din6_c0d3}&lt;/code>&lt;/p>
&lt;p>Flagを見て初めてUPXに思いを馳せることが想定されているのか, と思った. 時代はやっぱり人の手でやるまごころデバッグですよ.&lt;/p>
&lt;h2 id="pwn-paragraph-125pt-65teams">
 pwn: Paragraph (125pt, 65teams)
 &lt;a class="heading-link" href="#pwn-paragraph-125pt-65teams">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>ソースコードを見ると露骨にFormat String Attackしてね〜という顔をした&lt;code>printf&lt;/code>がいる.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// char name[24];
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#00b1f7">scanf&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;%23s&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">name&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00b1f7">printf&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">name&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00b1f7">printf&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34; answered, a bit confused.&lt;/span>&lt;span style="color:#d26464;font-weight:bold">\n\&amp;#34;&lt;/span>&lt;span style="color:#98c379">Welcome to SECCON,&lt;/span>&lt;span style="color:#d26464;font-weight:bold">\&amp;#34;&lt;/span>&lt;span style="color:#98c379"> the cat greeted %s warmly.&lt;/span>&lt;span style="color:#d26464;font-weight:bold">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">name&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで問題となるのはFormat String Attackでどこを書き換えてあげれば良いかである. このscanfでpayloadを送るタイミングではglibcのアドレスもわからないのでリターンアドレスを書き換えてROPするのは辛そうなので, GOTを書き換えてその下の&lt;code>printf&lt;/code>を&lt;code>scanf&lt;/code>に挿げ替えることを考えた. こうするとちょうど下の行が,&lt;/p></description></item><item><title>[CTF] IERAE CTF 2024 writeup</title><link>https://caphosra.net/posts/2024-09-22-ierae-ctf/</link><pubDate>Sun, 22 Sep 2024 16:10:12 +0900</pubDate><guid>https://caphosra.net/posts/2024-09-22-ierae-ctf/</guid><description>&lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">&lt;/script>
&lt;p>caphosraです. IERAE CTF 2024にTSGとして参加しました. Cryptoのderangement, Weak PRNGとmiscのgnalangの計3問解いたのでwriteupを書きたいと思います.&lt;/p>
&lt;p>分量と難易度的にgnalangのwriteupがメインになります.&lt;/p>
&lt;h2 id="crypto-derangement">
 Crypto: derangement
 &lt;a class="heading-link" href="#crypto-derangement">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>長さ15のランダムな文字列をランダムに並べ替えたものが与えられ, その元の文字列を求める問題. 並び替えた文字列のどの文字も元の文字列と異なることが保証されている.&lt;/p>
&lt;p>とりあえず回数上限近くまで並べ替え後の文字列を受け取って, 各 \(i\) 文字目についてありえない文字のリストを構成する. その上で, そのリストに含まれていない文字を順に並べていけば良い.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-weight:bold;font-style:italic">#!/usr/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">from&lt;/span> &lt;span style="color:#ca72ff">ptrlib&lt;/span> &lt;span style="color:#76a9f9">import&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">proc&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">Socket&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;XXX.XXX.XXX.XXX&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">55555&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">LENGTH&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">15&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">LOOP&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">280&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">banned&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#e5c07b">list&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">_&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">LENGTH&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">banned&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">append&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">list&lt;/span>&lt;span style="color:#abb2bf">())&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">word&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#e5c07b">None&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">_&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">LOOP&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">proc&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">sendlineafter&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;&amp;gt; &amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#63c381">&amp;#34;1&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">proc&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">recvuntil&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;hint: &amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">hint&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">proc&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">recvline&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">decode&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">not&lt;/span> &lt;span style="color:#aa89ea">word&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">word&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">hint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">assert&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">hint&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#54b1c7">==&lt;/span> &lt;span style="color:#aa89ea">LENGTH&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">LENGTH&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#aa89ea">hint&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">not&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#aa89ea">banned&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">banned&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">append&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">hint&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">])&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">determined&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#63c381">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">LENGTH&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;len(banned[&lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">]) = &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#e5c07b">len&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">banned&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">])&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">banned&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">])&lt;/span> &lt;span style="color:#54b1c7">!=&lt;/span> &lt;span style="color:#aa89ea">LENGTH&lt;/span> &lt;span style="color:#54b1c7">-&lt;/span> &lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">proc&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">close&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">c&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#aa89ea">word&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#aa89ea">c&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">not&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#aa89ea">banned&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">determined&lt;/span> &lt;span style="color:#54b1c7">+=&lt;/span> &lt;span style="color:#aa89ea">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;magic word = &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#aa89ea">determined&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">proc&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">sendlineafter&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;&amp;gt; &amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#63c381">&amp;#34;2&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">proc&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">sendlineafter&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#63c381">&amp;#34;&amp;gt; &amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">determined&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">proc&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">interactive&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行結果は以下の通り.&lt;/p></description></item><item><title>[CTF] SECCON CTF 2023 Finals Domestic writeup</title><link>https://caphosra.net/posts/2024-01-07-seccon-final/</link><pubDate>Sun, 07 Jan 2024 20:14:04 +0900</pubDate><guid>https://caphosra.net/posts/2024-01-07-seccon-final/</guid><description>&lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">&lt;/script>
&lt;p>SECCON CTF 2023の国内決勝にTSGとして参加しました. 1.5問くらい解いたのでwriteupを書きたいと思います.&lt;/p>
&lt;h2 id="reversing-remov">
 Reversing: ReMOV
 &lt;a class="heading-link" href="#reversing-remov">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Reversingの問題. 大量の意味のないmov, movaps命令が並んでいるバイナリが与えられ, そのバイナリが受理するFlagを考えるというもの.&lt;/p>
&lt;p>GhidraでさっとDisassembleして読もうとしたが, 当然まともに読めそうになかったのでgdbで実行しながら怪しい部分を探した. まず, 最初の方は文字列の長さを見て32文字であるかを確認する部分がある. その次に, 文字列の先頭が&lt;code>SECCON{&lt;/code>であるかどうかを判定する部分と最後が&lt;code>}&lt;/code>で終了しているか確認する部分がある.&lt;/p>
&lt;p>ここまでは, 適当に&lt;code>SECCON{AAA....A}&lt;/code>のような長さ32の文字列を与えておけば特に問題はない. さて, ここから引数を8bytesごとにチェックするパートに入る. 具体的には8bytesを切り出して, ある固定値とxorを取ってから別の固定値と比較する操作が4回行われる. 一見, もう一度xorを取ることで容易にFlagを復号できそうだが, このままでは先頭8bytesの値が&lt;code>L\xbd~\xb3HN{y&lt;/code>でなければならなくなり, これは先頭8bytesが&lt;code>SECCON{&lt;/code>であることと矛盾する.&lt;/p>
&lt;p>もう一度用心深く探ってみると, 途中で不審にptraceを呼んでいる部分がある. これでgdbのようなデバッガーをattachしているかどうか判定し, その返り値によってxorをとる固定値を変更しているようである. そこで, ptraceが呼ばれた後に&lt;code>rax&lt;/code>を変えてしまえば問題ないだろうと推測し, 実際うまく行った. 以下のように書けばこれを実現できる.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;b *0x555555555096&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;c&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;set $rax = 0&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>実際にその場で書いたソースコードはこんな感じ. 8bytesごとに答えが出てくる.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-weight:bold;font-style:italic">#!/bin/python3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">import&lt;/span> &lt;span style="color:#ca72ff">gdb&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">import&lt;/span> &lt;span style="color:#ca72ff">re&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">flag&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#98c379">b&lt;/span>&lt;span style="color:#63c381">&amp;#34;SECCON&lt;/span>&lt;span style="color:#98c379">{y3t_4n0th3r_m0vfuAAAAAAA}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;file ./remov&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">o&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#98c379">&amp;#39;starti &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#aa89ea">flag&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">decode&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#98c379">&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">to_string&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#e5c07b">True&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">o&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;b *0x555555555096&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;b *0x555555555605&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;b *0x555555555637&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;b *0x55555555567d&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;c&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;set $rax = 0&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">current&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">from_bytes&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">flag&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#abb2bf">],&lt;/span> &lt;span style="color:#63c381">&amp;#34;little&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">a&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#abb2bf">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">for&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span> &lt;span style="color:#b756ff;font-weight:bold">in&lt;/span> &lt;span style="color:#e5c07b">range&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">4&lt;/span>&lt;span style="color:#abb2bf">):&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;c&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">output1&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">gdb&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">execute&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#39;reg&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">to_string&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#e5c07b">True&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">output1&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">m&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">re&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">search&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">r&lt;/span>&lt;span style="color:#98c379">&amp;#39;(0x.+)&amp;#39;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">output1&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">append&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">m&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">group&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">),&lt;/span> &lt;span style="color:#d19a66">16&lt;/span>&lt;span style="color:#abb2bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;rax: &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#e5c07b">hex&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">])&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">current&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">current&lt;/span> &lt;span style="color:#54b1c7">^&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span> &lt;span style="color:#54b1c7">&amp;lt;&amp;lt;&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">0x8&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#aa89ea">i&lt;/span>&lt;span style="color:#abb2bf">))&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;check: &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#e5c07b">hex&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">current&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">assert&lt;/span> &lt;span style="color:#e5c07b">len&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#54b1c7">==&lt;/span> &lt;span style="color:#d19a66">4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">e1&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">0xbde671e813ba0ec4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">e2&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">0xfe313878bfd3832a&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">e3&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">0xefe4966fa7747a84&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">e4&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">0xac6a45cfcc93f053&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">from&lt;/span> &lt;span style="color:#ca72ff">pwn&lt;/span> &lt;span style="color:#76a9f9">import&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">ans1&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">e1&lt;/span> &lt;span style="color:#54b1c7">^&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">ans2&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">e2&lt;/span> &lt;span style="color:#54b1c7">^&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">1&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">ans3&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">e3&lt;/span> &lt;span style="color:#54b1c7">^&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">2&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">ans4&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">e4&lt;/span> &lt;span style="color:#54b1c7">^&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">3&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">test&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">from_bytes&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">flag&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#abb2bf">],&lt;/span> &lt;span style="color:#63c381">&amp;#34;little&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#54b1c7">^&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">[&lt;/span>&lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;possible: &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#aa89ea">ans1&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;assume: &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#e5c07b">hex&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">test&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">ans1&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">ans1&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">to_bytes&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#63c381">&amp;#34;little&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;ans1: &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#aa89ea">ans1&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">ans2&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">ans2&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">to_bytes&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#63c381">&amp;#34;little&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;ans2: &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#aa89ea">ans2&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">ans3&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">ans3&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">to_bytes&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#63c381">&amp;#34;little&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;ans3: &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#aa89ea">ans3&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">ans4&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">ans4&lt;/span>&lt;span style="color:#54b1c7">.&lt;/span>&lt;span style="color:#aa89ea">to_bytes&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">8&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#63c381">&amp;#34;little&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">print&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">f&lt;/span>&lt;span style="color:#63c381">&amp;#34;ans4: &lt;/span>&lt;span style="color:#98c379">{&lt;/span>&lt;span style="color:#aa89ea">ans4&lt;/span>&lt;span style="color:#98c379">}&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>FLAG: &lt;code>SECCON{y3t_4n0th3r_m0vfu5c4t0r?}&lt;/code>&lt;/p></description></item><item><title>自作言語を作るまでに使えるツールたち</title><link>https://caphosra.net/posts/2020-10-03-original-language/</link><pubDate>Sat, 03 Oct 2020 21:36:42 +0900</pubDate><guid>https://caphosra.net/posts/2020-10-03-original-language/</guid><description>&lt;p>遂に、自作言語kaprinoが無事完成したのでその記念に、自作言語を実装するにあたって
使った物をこの記事で紹介したいと思います。実際に自作言語を作ろうと思っても
何から手を付けていいのか分からなくなってしまうことがあることは想像に難くないので、
その様な人への羅針盤のような記事になることを期待しています。&lt;br>
ただ、それぞれの使い方まで言及すると記事の量がどえらい事になるので、使い方はいずれ書こうと思います。&lt;/p>
&lt;p>これから自作言語作る予定がある方は必見です!&lt;br>
もう既に自作言語を実装した経験がある方は&lt;del>お手柔らかにお願いします。&lt;/del>&lt;/p>
&lt;p>自作言語kaprinoのソースコードを管理しているrepositoryへのリンクと自作のオンラインコンパイラ(この話はまた別の記事で)です。もし良かったら見てみてください。&lt;br>
&lt;a href="https://github.com/kaprino-lang/kaprino" class="external-link" target="_blank" rel="noopener">Github kaprino-lang&lt;/a>&lt;br>
&lt;a href="https://kaprino-lang.github.io/online/" class="external-link" target="_blank" rel="noopener">Kaprino Online Compiler&lt;/a>&lt;/p>
&lt;h2 id="まず自作言語を何故作ろうと思ったのか">
 まず自作言語を何故作ろうと思ったのか
 &lt;a class="heading-link" href="#%e3%81%be%e3%81%9a%e8%87%aa%e4%bd%9c%e8%a8%80%e8%aa%9e%e3%82%92%e4%bd%95%e6%95%85%e4%bd%9c%e3%82%8d%e3%81%86%e3%81%a8%e6%80%9d%e3%81%a3%e3%81%9f%e3%81%ae%e3%81%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;del>なぜでしょうね。&lt;/del>&lt;br>
自作言語を作る人がよく言うのは、使っている既存の言語に不満があって自分の好みにあった言語を作ってみたい、という感じでしょうが、
私が自作言語を作ろうと思った理由は、本当になんとなくです。自作言語という言葉の響きによるものだと言えるかもしれませんし、
単純に自分は気付いていないだけで言語に不満があったのかもしれません。&lt;br>
これは本題ではないのでこれくらいにしておきます。&lt;/p>
&lt;h2 id="言語を動かすまでを大雑把に把握">
 言語を動かすまでを大雑把に把握
 &lt;a class="heading-link" href="#%e8%a8%80%e8%aa%9e%e3%82%92%e5%8b%95%e3%81%8b%e3%81%99%e3%81%be%e3%81%a7%e3%82%92%e5%a4%a7%e9%9b%91%e6%8a%8a%e3%81%ab%e6%8a%8a%e6%8f%a1">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>さて本題に入りましょう。&lt;br>
これから言語を作るまでに使ったものを紹介してゆく訳ですが、そもそも私の自作言語kaprinoが
どのように動いているか説明したいと思います。&lt;/p>
&lt;p>まず、kaprinoは静的な型付けの言語で、実行前にコンパイルを必要とします。&lt;br>
&lt;strong>コンパイル&lt;/strong> とはソースコードを機械語に変換することです。このコンパイルは通常、以下の様な作業を行います。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Lexer&lt;/strong> (字句解析器) と呼ばれるものでソースコードを &lt;strong>Token&lt;/strong> (小さい文字列)に分解&lt;/li>
&lt;li>&lt;strong>Parser&lt;/strong> (構文解析器) と呼ばれるものでTokenを &lt;strong>AST&lt;/strong> (抽象構文木)に変換&lt;/li>
&lt;li>ASTを低級言語(機械語やアセンブリ言語)に変換&lt;/li>
&lt;/ol>
&lt;p>ということはこの三つを行うプログラムを書くことが出来れば自作言語のコンパイラを手にする事ができます!&lt;/p>
&lt;p>しかし、愚直にこれらを一から実装すると途轍もない時間がかかります。そこでライブラリを使って実装していくことになります。&lt;/p>
&lt;p>&lt;strong>以下、C++で書くことを前提として話を進めます&lt;/strong>&lt;br>
C#とかJavaとかRustとかでもいいんですがそれらは&lt;del>記事の対象外ということで&lt;/del>&lt;/p>
&lt;h2 id="1-lexerを実装する">
 1. Lexerを実装する
 &lt;a class="heading-link" href="#1-lexer%e3%82%92%e5%ae%9f%e8%a3%85%e3%81%99%e3%82%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Lexerはこれから行う3つの事の中では最も簡単に実装ができます。自力実装もそこまで難しくないです。&lt;br>
しかし、今回のテーマはツール紹介ということなので自力でやりたいよ、という方は無視します。&lt;br>
&lt;del>頑張って下さい。応援しています。&lt;/del>&lt;/p>
&lt;p>LexerをC++で実装する時に使われる有名なツール(ライブラリ)として挙げられるのはこの三つです。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>lex&lt;/strong> (伝統的)&lt;/li>
&lt;li>&lt;strong>flex&lt;/strong> (再構築されたlex)&lt;/li>
&lt;li>&lt;strong>Antlr4&lt;/strong> (新勢力)&lt;/li>
&lt;/ul>
&lt;p>flexはlexと構文がほとんど同じなので、lexを使うくらいならより新しいflexを使ったほうがいいと思います。&lt;br>
flexとAntlr4について言えば、どちらを選んでも困ることは起こらないので、それぞれ検索してみて、サンプルコードにシンパシーを感じた方を使えばいいと思います。&lt;/p>
&lt;p>個人的にはAntlr4で書いた方が読みやすいと思ったので、kaprinoにもAntlr4を使っています。&lt;/p>
&lt;h2 id="2-parserを実装する">
 2. Parserを実装する
 &lt;a class="heading-link" href="#2-parser%e3%82%92%e5%ae%9f%e8%a3%85%e3%81%99%e3%82%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>ParserをC++で実装する時に使われる有名なツール(ライブラリ)として挙げられるのはこの三つです。&lt;/p></description></item><item><title>C++で全てのstd::minやstd::maxにエラーが出た時の対処法</title><link>https://caphosra.net/posts/2020-07-14-cpp-conflict/</link><pubDate>Tue, 14 Jul 2020 21:53:29 +0900</pubDate><guid>https://caphosra.net/posts/2020-07-14-cpp-conflict/</guid><description>&lt;p>今日、先程あった出来事なのですが、手元のLinux環境で動いているコードをWindows上でビルドしようとしたら突如大量のエラーが発生。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>C:\Program Files (x86)\LLVM\include\llvm/ADT/StringRef.h(286,1): error C2059: syntax error: &amp;#39;)&amp;#39; [D:\a\kaprino\kaprino\build\kprc.vcxproj]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C:\Program Files (x86)\LLVM\include\llvm/ADT/StringRef.h(346,19): error C2589: &amp;#39;(&amp;#39;: illegal token on right side of &amp;#39;::&amp;#39; [D:\a\kaprino\kaprino\build\kprc.vcxproj]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C:\Program Files (x86)\LLVM\include\llvm/ADT/StringRef.h(346,1): error C2062: type &amp;#39;unknown-type&amp;#39; unexpected [D:\a\kaprino\kaprino\build\kprc.vcxproj]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C:\Program Files (x86)\LLVM\include\llvm/ADT/StringRef.h(346,1): error C2059: syntax error: &amp;#39;)&amp;#39; [D:\a\kaprino\kaprino\build\kprc.vcxproj]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C:\Program Files (x86)\LLVM\include\llvm/ADT/StringRef.h(579,20): error C2589: &amp;#39;(&amp;#39;: illegal token on right side of &amp;#39;::&amp;#39; [D:\a\kaprino\kaprino\build\kprc.vcxproj]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C:\Program Files (x86)\LLVM\include\llvm/ADT/StringRef.h(579,1): error C2062: type &amp;#39;unknown-type&amp;#39; unexpected [D:\a\kaprino\kaprino\build\kprc.vcxproj]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>C:\Program Files (x86)\LLVM\include\llvm/ADT/StringRef.h(579,1): error C2059: syntax error: &amp;#39;)&amp;#39; [D:\a\kaprino\kaprino\build\kprc.vcxproj]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>....
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>エラーが出ている部分を確認すると全て&lt;code>std::min&lt;/code>と&lt;code>std::max&lt;/code>でした。&lt;/p></description></item><item><title>[C# tips] #3 C#を対話形式で実行しよう</title><link>https://caphosra.net/posts/2020-05-24-csharptips3/</link><pubDate>Sun, 24 May 2020 06:36:13 +0900</pubDate><guid>https://caphosra.net/posts/2020-05-24-csharptips3/</guid><description>&lt;p>簡単な計算をする時にPythonを使っていませんか?&lt;br>
対話形式で実行するのはとても便利ですよね。しかし、これと同じことはC#でも出来るのです。&lt;/p>
&lt;h2 id="そもそも対話形式とは">
 そもそも対話形式とは?
 &lt;a class="heading-link" href="#%e3%81%9d%e3%82%82%e3%81%9d%e3%82%82%e5%af%be%e8%a9%b1%e5%bd%a2%e5%bc%8f%e3%81%a8%e3%81%af">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>ユーザーがプログラムを入力すると、それを評価してくれるのが対話形式です。&lt;br>
Pythonを使ったことがあれば、以下のような感じです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#54b1c7">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#54b1c7">&amp;gt;&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#d19a66">3.14&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#d19a66">314.0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>その場で計算してくれるので、書き捨てコードとしてとても有用です。(筆者は素数判定とかを無性にしたくなった時に使っています。)&lt;/p>
&lt;h2 id="cって静的言語だから無理なんじゃないですか">
 C#って静的言語だから無理なんじゃないですか?
 &lt;a class="heading-link" href="#c%e3%81%a3%e3%81%a6%e9%9d%99%e7%9a%84%e8%a8%80%e8%aa%9e%e3%81%a0%e3%81%8b%e3%82%89%e7%84%a1%e7%90%86%e3%81%aa%e3%82%93%e3%81%98%e3%82%83%e3%81%aa%e3%81%84%e3%81%a7%e3%81%99%e3%81%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Pythonは動的実行をしている(実行時に型変換等を行っている)のに対して、&lt;br>
C#はC++などと同じで静的言語であるので実行にはコンパイルが不可欠なはずです。&lt;br>
コンパイルが必要ということは、時間がかかりすぎるので対話形式で実行するのには致命的&amp;hellip;&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/%E5%8B%95%E7%9A%84%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E8%A8%80%E8%AA%9E" class="external-link" target="_blank" rel="noopener">Wikipedia 動的プログラミング言語&lt;/a>&lt;/p>
&lt;p>しかし、C#を動的に実行したいと考える人はいるようで&lt;/p>
&lt;h2 id="cを対話形式で実行する拡張">
 C#を対話形式で実行する拡張
 &lt;a class="heading-link" href="#c%e3%82%92%e5%af%be%e8%a9%b1%e5%bd%a2%e5%bc%8f%e3%81%a7%e5%ae%9f%e8%a1%8c%e3%81%99%e3%82%8b%e6%8b%a1%e5%bc%b5">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>世の中にはC#を対話形式で実行したいと思う人が少なからずいるのでしょう。C#を標準で対話形式で実行することは出来ませんが、
拡張を使用することでできるようになります。&lt;br>
いくつか拡張が存在するのでご紹介します。&lt;/p>
&lt;h3 id="c-repl">
 C# REPL
 &lt;a class="heading-link" href="#c-repl">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>有名な対話形式の拡張として、オープンソースのC#の先駆けとなったMonoプロジェクトが提供する
&lt;a href="https://www.mono-project.com/docs/tools&amp;#43;libraries/tools/repl/" class="external-link" target="_blank" rel="noopener">C# REPL&lt;/a>があります。&lt;/p>
&lt;p>使い方は簡単です。Monoをインストールして&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ csharp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と実行するだけです。&lt;br>
以下の様にC#を対話形式で実行することが可能です。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ csharp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>csharp&amp;gt; using System&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>csharp&amp;gt; var &lt;span style="color:#dcaeea">a&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> 10&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>csharp&amp;gt; a * a * Math.PI&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>314.159265358979
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mono C#を使用している方は今すぐ試すことができます。&lt;/p>
&lt;h3 id="dotnet-script">
 dotnet script
 &lt;a class="heading-link" href="#dotnet-script">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>C# REPLはMonoプロジェクトのものでした。一方でこちらは .NET Coreで使うことができるものです。&lt;br>
&lt;a href="https://github.com/filipw/dotnet-script" class="external-link" target="_blank" rel="noopener">dotnet script&lt;/a>は .NET CoreにGlobal toolとして以下のコマンドを使用してインストール出来ます。&lt;br>
.NET Core 2.1以上が必要なことに注意してください。&lt;/p></description></item><item><title>[LLVM] CreateGlobalStringPtrがクラッシュするときの対処法</title><link>https://caphosra.net/posts/2020-05-02-llvm-string-ptr/</link><pubDate>Sat, 02 May 2020 06:12:01 +0900</pubDate><guid>https://caphosra.net/posts/2020-05-02-llvm-string-ptr/</guid><description>&lt;p>CreateGlobalStringPtrをif文のブロックの中で失敗したので、それを解決する方法をご紹介します。&lt;/p>
&lt;h2 id="発生したエラー">
 発生したエラー
 &lt;a class="heading-link" href="#%e7%99%ba%e7%94%9f%e3%81%97%e3%81%9f%e3%82%a8%e3%83%a9%e3%83%bc">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>先ずは愚直にif文を実装していきましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">ifblock&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getContext&lt;/span>&lt;span style="color:#abb2bf">(),&lt;/span> &lt;span style="color:#98c379">&amp;#34;then&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">mergeblock&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getContext&lt;/span>&lt;span style="color:#abb2bf">(),&lt;/span> &lt;span style="color:#98c379">&amp;#34;merged&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ブランチの分かれた部分と合流部分ですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">CreateCondBr&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">match&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">ifblock&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">mergeblock&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">SetInsertPoint&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">ifblock&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">strptr&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">CreateGlobalStringPtr&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">// ERROR !
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">CreateBr&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">mergeblock&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>その後でブランチを組込んで、if文の中に&lt;code>SetInsertPoint&lt;/code>してから、&amp;ldquo;Hello World&amp;quot;という文字列をグローバル空間に確保してポインターを取得します。&lt;br>
この際、期待通りの動作であればグローバル空間に&amp;quot;Hello World&amp;quot;と書き込んでから、そのポインターを取得するという操作になります。&lt;br>
今、適当な関数の中のBasicBlockで、この操作を行ったものと仮定すれば、以下のようなコードとほぼ同等なはずです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#e5c07b">char&lt;/span>&lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#aa89ea">str&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#98c379">&amp;#34;Hello World&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">void&lt;/span> &lt;span style="color:#00b1f7">somefunc&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#aa89ea">match&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">match&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic">// Create global string poiter and it points &amp;#34;HelloWorld&amp;#34;.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span> &lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">strptr&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">str&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、このコードは失敗してしまいます。なぜでしょうか。&lt;/p>
&lt;h2 id="basicblockの親の関数に注意">
 BasicBlockの親の関数に注意!
 &lt;a class="heading-link" href="#basicblock%e3%81%ae%e8%a6%aa%e3%81%ae%e9%96%a2%e6%95%b0%e3%81%ab%e6%b3%a8%e6%84%8f">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>鋭い方はもうお気づきでしょうが、(私は全く鋭くないので気づくのに2時間かかりました)&lt;br>
&lt;code>ifblock&lt;/code>と&lt;code>mergeblock&lt;/code>の親の関数が指定されていません。&lt;code>BasicBlock::Create&lt;/code>は親の関数を指定しなくても使えるので、意外と気づかないではまってしまいました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">LLVMContext&lt;/span> &lt;span style="color:#54b1c7">&amp;amp;&lt;/span>&lt;span style="color:#aa89ea">Context&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#aa89ea">Twine&lt;/span> &lt;span style="color:#54b1c7">&amp;amp;&lt;/span>&lt;span style="color:#aa89ea">Name&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#98c379">&amp;#34;&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">Function&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span>&lt;span style="color:#aa89ea">Parent&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#76a9f9">nullptr&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">BasicBlock&lt;/span> &lt;span style="color:#54b1c7">*&lt;/span>&lt;span style="color:#aa89ea">InsertBefore&lt;/span>&lt;span style="color:#54b1c7">=&lt;/span>&lt;span style="color:#76a9f9">nullptr&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://llvm.org/doxygen/classllvm_1_1BasicBlock.html" class="external-link" target="_blank" rel="noopener">llvm::BasicBlock Class Reference&lt;/a>&lt;/p>
&lt;p>親の関数を指定していなくても様々な操作をできるのですが、&lt;code>CreateGlobalStringPtr&lt;/code>を呼び出すには関数とBasicBlockが必要条件なので実行に失敗していたわけです。&lt;/p>
&lt;p>ということで纏めると、親の関数を指定しないと&lt;code>CreateGlobalStringPtr&lt;/code>は呼び出せないよ、ということです。&lt;/p>
&lt;h2 id="おまけ-現在挿入中の関数を取得する">
 [おまけ] 現在挿入中の関数を取得する
 &lt;a class="heading-link" href="#%e3%81%8a%e3%81%be%e3%81%91-%e7%8f%be%e5%9c%a8%e6%8c%bf%e5%85%a5%e4%b8%ad%e3%81%ae%e9%96%a2%e6%95%b0%e3%82%92%e5%8f%96%e5%be%97%e3%81%99%e3%82%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>現在のBasicBlockを取得してからその親の関数を取得すれば実現可能です。
BasicBlockを一度介すのがミソです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">parent&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">builder&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">GetInsertBlock&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getParent&lt;/span>&lt;span style="color:#abb2bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを使用すれば、以下の様に書き換えて先程のコードを動かすことができます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">ifblock&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getContext&lt;/span>&lt;span style="color:#abb2bf">(),&lt;/span> &lt;span style="color:#98c379">&amp;#34;then&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">parent&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">mergeblock&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">BasicBlock&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Create&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#54b1c7">-&amp;gt;&lt;/span>&lt;span style="color:#aa89ea">getContext&lt;/span>&lt;span style="color:#abb2bf">(),&lt;/span> &lt;span style="color:#98c379">&amp;#34;merged&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">parent&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="さいごに">
 さいごに
 &lt;a class="heading-link" href="#%e3%81%95%e3%81%84%e3%81%94%e3%81%ab">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>これだけは言いたい。LLVMの日本語資料少なすぎー! &lt;del>(英語読めよ)&lt;/del>&lt;br>
まあ、これがLLVMの記事をかく原動力になっているのですが。&lt;/p></description></item><item><title>[C# tips] #2 privateなメンバーにアクセスしよう</title><link>https://caphosra.net/posts/2020-04-10-csharptips2/</link><pubDate>Fri, 10 Apr 2020 18:08:04 +0900</pubDate><guid>https://caphosra.net/posts/2020-04-10-csharptips2/</guid><description>&lt;p>これで二回目です。前回はC#のLinqに関する軽い紹介を書きました。&lt;br>
今日のテーマは&amp;quot;privateなメンバーにアクセスしよう&amp;quot;です。&lt;/p>
&lt;h2 id="注意">
 注意
 &lt;a class="heading-link" href="#%e6%b3%a8%e6%84%8f">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>この記事では&lt;code>System.Reflection&lt;/code>を使用してprivateなメンバーにアクセスする方法をお伝えします。ただ、自己責任でお願いします。(危ない操作ではありませんが、人のコードに対して行えば著作権侵害とかになりえるので。)&lt;/p>
&lt;h2 id="突然ですが問題です">
 突然ですが問題です
 &lt;a class="heading-link" href="#%e7%aa%81%e7%84%b6%e3%81%a7%e3%81%99%e3%81%8c%e5%95%8f%e9%a1%8c%e3%81%a7%e3%81%99">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>あなたは以下のようなクラスのインスタンスを与えられました。&lt;br>
このクラスにはどうやらfloat型の変数があってそれは秘密の値で初期化されているようです。&lt;br>
秘密にされると暴きたくなるのが人間の性、Capra君はどうしても秘密の値を知りたいです。&lt;br>
果たしてどうすれば秘密の値を手に入れられるでしょうか?&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">public&lt;/span> &lt;span style="color:#76a9f9">class&lt;/span> &lt;span style="color:#ca72ff">HasSecret&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">private&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#abb2bf">?????&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#abb2bf">?????;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">public&lt;/span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#aa89ea">dummy1&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">3.14f&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">private&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#aa89ea">dummy2&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">314&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ならディスアセンブルすれば">
 ならディスアセンブルすれば&amp;hellip;?
 &lt;a class="heading-link" href="#%e3%81%aa%e3%82%89%e3%83%87%e3%82%a3%e3%82%b9%e3%82%a2%e3%82%bb%e3%83%b3%e3%83%96%e3%83%ab%e3%81%99%e3%82%8c%e3%81%b0">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>確かに、dnSpyというC#で凄まじい威力を発揮するディスアセンブラを使えば瞬殺できます。ただ、やはりC#のコードで解決したいですよね。(というより、dnSpy使うのなら記事の意味がなくなってしまいそう&amp;hellip;)&lt;/p>
&lt;p>&lt;a href="https://github.com/0xd4d/dnSpy" class="external-link" target="_blank" rel="noopener">GitHub - 0xd4d/dnSpy&lt;/a>&lt;/p>
&lt;p>ということでC#のコードから&lt;code>HasSecret&lt;/code>内の変数にアクセスしてみましょう。&lt;/p>
&lt;h2 id="まずは愚直にアクセス">
 まずは愚直にアクセス
 &lt;a class="heading-link" href="#%e3%81%be%e3%81%9a%e3%81%af%e6%84%9a%e7%9b%b4%e3%81%ab%e3%82%a2%e3%82%af%e3%82%bb%e3%82%b9">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>試しに、dummy2に何も考えずにアクセスしてみましょう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">var&lt;/span> &lt;span style="color:#aa89ea">secret&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">HasSecret&lt;/span>&lt;span style="color:#abb2bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">Console&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">WriteLine&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">secert&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">dummy2&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>error CS0122: &amp;#39;HasSecret.dummy2&amp;#39; is inaccessible due to its protection level
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然ながらエラーが発生しました。これでアクセス出来たらライブラリ開発者はたまったものじゃないですよね。せっかくの実装の隠蔽が意味をなさなくなりますから。&lt;/p>
&lt;p>また、この方法だと、privateな変数にアクセスするどころか変数名さえわかりません。&lt;br>
今回は変数名さえわからない状態なので、どうすればいいのでしょうか&amp;hellip;&lt;/p>
&lt;h2 id="ここでsystemreflection">
 ここでSystem.Reflection
 &lt;a class="heading-link" href="#%e3%81%93%e3%81%93%e3%81%a7systemreflection">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>ここから、&lt;code>System.Reflection&lt;/code>を使っていきます。&lt;br>
&lt;code>System.Reflection&lt;/code>は型の情報を使用して動的に物事を処理する方法を提供するクラスを揃えたバリューパックのような名前空間です。&lt;/p>
&lt;p>それではそれらを使用して、privateな変数にアクセスしていきましょう。&lt;br>
まず、&lt;code>GetType&lt;/code>関数を使って動的に型を取得します。静的に型を取得したい方は&lt;code>typeof&lt;/code>キーワードを利用するといいと思います。&lt;br>
受け取った型の型は&lt;code>System.Type&lt;/code>となります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// using System.Reflection;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">var&lt;/span> &lt;span style="color:#aa89ea">secret&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">HasSecret&lt;/span>&lt;span style="color:#abb2bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">var&lt;/span> &lt;span style="color:#aa89ea">type&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">secret&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">GetType&lt;/span>&lt;span style="color:#abb2bf">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>型を変数として受け取ったら、型が持っている&lt;code>GetFields&lt;/code>を呼び出します。名前から想像がつくように、型から、条件を満たす全てのFieldの情報を取得してくる関数です。因みに戻り値は&lt;code>System.Reflection.FieldInfo[]&lt;/code>です。&lt;/p></description></item><item><title>[LLVM] printfでFloat型の足し算の結果を表示する</title><link>https://caphosra.net/posts/2020-04-09-llvm-printf-float/</link><pubDate>Thu, 09 Apr 2020 13:06:28 +0900</pubDate><guid>https://caphosra.net/posts/2020-04-09-llvm-printf-float/</guid><description>&lt;p>LLVMのC++ APIを使用して、printfでFloat同士の足し算の結果を表示するLLVM IRを表示するまでを行いたいと思います。&lt;/p>
&lt;h2 id="筆者の環境">
 筆者の環境
 &lt;a class="heading-link" href="#%e7%ad%86%e8%80%85%e3%81%ae%e7%92%b0%e5%a2%83">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>LLVM: LLVM 9.0.1&lt;/li>
&lt;li>Compiler: Visual Studio付属のcl.exe&lt;/li>
&lt;/ul>
&lt;h2 id="こんなコードを出力したい">
 こんなコードを出力したい
 &lt;a class="heading-link" href="#%e3%81%93%e3%82%93%e3%81%aa%e3%82%b3%e3%83%bc%e3%83%89%e3%82%92%e5%87%ba%e5%8a%9b%e3%81%97%e3%81%9f%e3%81%84">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>以下のC言語のプログラムと同じ動きをするLLVM IRを出力するのが今回の目標です。&lt;br>
floatの値を2つ足し算をしてprintfですね。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#include&lt;/span> &lt;span style="color:#8a93a5;font-style:italic">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span style="color:#8a93a5;font-style:italic">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#00b1f7">main&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#aa89ea">f1&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">3.5&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#aa89ea">f2&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#d19a66">6.4&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00b1f7">printf&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;%f + %f = %f&lt;/span>&lt;span style="color:#d26464;font-weight:bold">\n&lt;/span>&lt;span style="color:#98c379">&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">f1&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">f2&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">f1&lt;/span> &lt;span style="color:#54b1c7">+&lt;/span> &lt;span style="color:#aa89ea">f2&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#d19a66">0&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="まずはprintfを定義しよう">
 まずはprintfを定義しよう
 &lt;a class="heading-link" href="#%e3%81%be%e3%81%9a%e3%81%afprintf%e3%82%92%e5%ae%9a%e7%be%a9%e3%81%97%e3%82%88%e3%81%86">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>まず、printfの定義について思い出してみましょう。&lt;br>
printfは関数の引数として、フォーマットの文字列と、複数の値をとることができます。&lt;br>
戻り値はInt32型で帰ってきます。(私は戻り値を使ったことがあまりないです。)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c" data-lang="c">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#00b1f7">printf&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#e5c07b">char&lt;/span>&lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#aa89ea">format&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#abb2bf">...);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>それではC++のコードで実装していきます。&lt;br>
まず、LLVMのサポートClassを初期化していきましょう。&lt;br>
Builderが大文字なのは、LLVMの公式Tutorialで大文字になっていたので、それに慣れてしまったからです。変数名は勿論変えていただいて問題ありません。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">LLVMContext&lt;/span> &lt;span style="color:#aa89ea">context&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">IRBuilder&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">Builder&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">context&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Module&lt;/span>&lt;span style="color:#54b1c7">*&lt;/span> &lt;span style="color:#aa89ea">module&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">module&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Module&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;test.ll&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">context&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これからいちいち型を定義するのは大変なので、基本的な型はマクロとして簡単にかける様にしておきます。これは本当に我流なのでこのマクロを定義するのが一般的だと思い込まないでください&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define LLVM_INT8_PTR_TY llvm::Type::getInt8PtrTy(context)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define LLVM_INT32_TY llvm::Type::getInt32Ty(context)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define LLVM_FLOAT_TY llvm::Type::getFloatTy(context)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define LLVM_DOUBLE_TY llvm::Type::getDoubleTy(context)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで前準備は終了です。printfの定義に移っていきましょう。&lt;br>
まずは関数の&amp;quot;型&amp;quot;を定義します。戻り値の型とvectorに詰めた引数の型を&lt;code>llvm::FunctionType::get&lt;/code>に投げて、関数の型を受け取ります。&lt;br>
Int8型(Char型)のポインターを引数にして、戻り値をInt32型で返します。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C++" data-lang="C++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">std&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">vector&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">Type&lt;/span>&lt;span style="color:#54b1c7">*&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">printfFuncArgs&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">printfFuncArgs&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">push_back&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">LLVM_INT8_PTR_TY&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">auto&lt;/span> &lt;span style="color:#aa89ea">printfFuncType&lt;/span> &lt;span style="color:#54b1c7">=&lt;/span> &lt;span style="color:#aa89ea">llvm&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">FunctionType&lt;/span>&lt;span style="color:#54b1c7">::&lt;/span>&lt;span style="color:#aa89ea">get&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">LLVM_INT32_TY&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">printfFuncArgs&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e5c07b">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>続けてprintf本体を作成しましょう。以下のようになります。&lt;/p></description></item><item><title>[C# tips] #1 C#でSQLみたいな構文?</title><link>https://caphosra.net/posts/2020-03-20-onepoint-csharp/</link><pubDate>Mon, 30 Mar 2020 16:26:36 +0900</pubDate><guid>https://caphosra.net/posts/2020-03-20-onepoint-csharp/</guid><description>&lt;blockquote>
&lt;p>30億のデバイスで動くJavaの方がC#より強そう&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>C#ってWin APIを呼ぶやつ&amp;hellip;?&lt;/p>
&lt;/blockquote>
&lt;p>このような事をいわれたことがあったので、対抗策として、C#の豆知識や小話(というほどでもない)を紹介するシリーズを始めようと思った次第です。&lt;br>
これが、記念すべき第一回です。&lt;/p>
&lt;h2 id="本編">
 本編
 &lt;a class="heading-link" href="#%e6%9c%ac%e7%b7%a8">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>じつはC#にはSQL likeな構文が用意されています、というのが今回の話です。(あ、これ知ってるよという方、&lt;del>黙ってこのページを閉じてください&lt;/del>)&lt;/p>
&lt;p>SQLと聞くと&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>データベースの操作をするやつ&lt;/li>
&lt;li>クエリを投げるやつ&lt;/li>
&lt;li>&lt;del>実はSQLは言語そのもののことではない&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>など色々思い浮かべると思います。&lt;/p>
&lt;p>SQLはデータを処理するのに特化した言語です。SQLでゲームを作るなどという話は聞いたことがありません。&lt;/p>
&lt;h2 id="sqlでデータを取り出してみる">
 SQLでデータを取り出してみる
 &lt;a class="heading-link" href="#sql%e3%81%a7%e3%83%87%e3%83%bc%e3%82%bf%e3%82%92%e5%8f%96%e3%82%8a%e5%87%ba%e3%81%97%e3%81%a6%e3%81%bf%e3%82%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>例えば、SQLのデータベースに以下のようなテーブルがあったとします。&lt;/p>
&lt;p>Table名 : TestResults&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">math&lt;/th>
 &lt;th style="text-align: left">english&lt;/th>
 &lt;th style="text-align: left">name&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">50&lt;/td>
 &lt;td style="text-align: left">100&lt;/td>
 &lt;td style="text-align: left">A&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">60&lt;/td>
 &lt;td style="text-align: left">70&lt;/td>
 &lt;td style="text-align: left">B&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">80&lt;/td>
 &lt;td style="text-align: left">80&lt;/td>
 &lt;td style="text-align: left">C&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">40&lt;/td>
 &lt;td style="text-align: left">90&lt;/td>
 &lt;td style="text-align: left">D&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>この時、&lt;code>math&lt;/code>が50以上なものを取り出し、&lt;code>english&lt;/code>の値の降順でソートしたいと思います。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-SQL" data-lang="SQL">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">SELECT&lt;/span> &lt;span style="color:#aa89ea">math&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">english&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">FROM&lt;/span> &lt;span style="color:#aa89ea">TestResults&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">WHERE&lt;/span> &lt;span style="color:#aa89ea">math&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;=&lt;/span> &lt;span style="color:#d19a66">50&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">ORDER&lt;/span> &lt;span style="color:#76a9f9">BY&lt;/span> &lt;span style="color:#aa89ea">english&lt;/span> &lt;span style="color:#76a9f9">DESC&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを行うSQLの文はこのようになります。ここでの解説は本題ではないので飛ばします。詳しくはググって下さい。&lt;/p>
&lt;h2 id="cでこれができたなら">
 C#でこれができたなら&amp;hellip;
 &lt;a class="heading-link" href="#c%e3%81%a7%e3%81%93%e3%82%8c%e3%81%8c%e3%81%a7%e3%81%8d%e3%81%9f%e3%81%aa%e3%82%89">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>できます。&lt;code>System.Linq&lt;/code>を使用しましょう。&lt;/p>
&lt;p>まず、Listを用意しましょう。Tupleを使用しました。古いバージョンのC#をお使いの方と匿名型大好きな方、すみません。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// using System;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// using System.Collections.Generic;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">var&lt;/span> &lt;span style="color:#aa89ea">testResults&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">List&lt;/span>&lt;span style="color:#abb2bf">&amp;lt;(&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#aa89ea">math&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span> &lt;span style="color:#aa89ea">english&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">string&lt;/span> &lt;span style="color:#aa89ea">name&lt;/span>&lt;span style="color:#abb2bf">)&amp;gt;()&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">50&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">100&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;A&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">60&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">70&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;B&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">80&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">80&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;C&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">),&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">40&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#d19a66">90&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#98c379">&amp;#34;D&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そして、C#でSQL likeに同じ処理を行ってみましょう。&lt;/p></description></item><item><title>Avalonia UIで画像を使ったボタンを作成する方法</title><link>https://caphosra.net/posts/2020-03-29-avalonia-image-button/</link><pubDate>Sun, 29 Mar 2020 10:17:52 +0900</pubDate><guid>https://caphosra.net/posts/2020-03-29-avalonia-image-button/</guid><description>&lt;p>今回は、知らないと難しい、Avalonia UIで画像を使ったボタンを作成していきます。&lt;br>
前置きはさっさと飛ばして、本題に入りましょう。&lt;/p>
&lt;h2 id="前提条件">
 前提条件
 &lt;a class="heading-link" href="#%e5%89%8d%e6%8f%90%e6%9d%a1%e4%bb%b6">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;ul>
&lt;li>もう既にAvaloniaのプロジェクトを作っていること。&lt;/li>
&lt;li>ボタンにする画像を選んでいること。&lt;/li>
&lt;/ul>
&lt;h2 id="画像の準備">
 画像の準備
 &lt;a class="heading-link" href="#%e7%94%bb%e5%83%8f%e3%81%ae%e6%ba%96%e5%82%99">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>私は3枚の画像を選びました。通常の見た目と、Hover時の見た目と、Click時の見た目です。1枚で全ての場合をやってもいいんですが、Userが見た目からボタンとして認識してくれない危険性があるので推奨はしません。&lt;/p>
&lt;p>画像は&lt;code>Assets&lt;/code>フォルダに入れます。&lt;br>
もし、&lt;code>Assets&lt;/code>フォルダがない!という場合は、&lt;code>Assets&lt;/code>フォルダを作ってから、プロジェクトファイルに&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">&amp;lt;ItemGroup&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">&amp;lt;AvaloniaResource&lt;/span> &lt;span style="color:#cebc3a">Include=&lt;/span>&lt;span style="color:#98c379">&amp;#34;Assets\*&amp;#34;&lt;/span>&lt;span style="color:#76a9f9">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">&amp;lt;/ItemGroup&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と追記してください。&lt;/p>
&lt;h2 id="usercontrolを作る">
 UserControlを作る
 &lt;a class="heading-link" href="#usercontrol%e3%82%92%e4%bd%9c%e3%82%8b">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>先ずは、UserControlを作成しましょう。名前は適宜読み替えてください。&lt;/p>
&lt;blockquote>
&lt;p>[Visual Studio]&lt;/p>
&lt;ol>
&lt;li>Right click your project&amp;rsquo;s Views folder in Solution Explorer&lt;/li>
&lt;li>Select the Add -&amp;gt; New Item menu item&lt;/li>
&lt;li>In the dialog that appears, navigate to the &amp;ldquo;Avalonia&amp;rdquo; section in the category tree&lt;/li>
&lt;li>Select &amp;ldquo;User Control (Avalonia)&amp;rdquo;&lt;/li>
&lt;li>Enter TodoListView as the &amp;ldquo;Name&amp;rdquo;&lt;/li>
&lt;li>Click the &amp;ldquo;Add&amp;rdquo; button&lt;/li>
&lt;/ol>
&lt;p>[.NET Core]&lt;/p></description></item><item><title>WSL2を使えるようにする</title><link>https://caphosra.net/posts/wsl2-setup/</link><pubDate>Sat, 14 Mar 2020 20:04:43 +0900</pubDate><guid>https://caphosra.net/posts/wsl2-setup/</guid><description>&lt;p>Windows上でLinuxをエミュレートしてくれるWSLが進化を遂げ&amp;hellip;&lt;br>
遂にWSL2が使用出来るようになりました!やったね!&lt;/p>
&lt;p>このニュースを聞いたら、当然プログラマー的には使ってみたくなりますよね。&lt;br>
ということで、気楽にインストールしようとしたら&amp;hellip;&amp;ldquo;あれ?コマンドがないよ&amp;quot;みたいにWindowsに怒られてしまいました。&lt;/p>
&lt;p>WSL2を使用出来るようにするのは一筋縄ではいかなかったので使用できるまでの道筋を紹介していきたいと思います。&lt;/p>
&lt;p>WSL2はまだ安定していない様なので &lt;strong>あくまで自己責任で&lt;/strong> お願いします。&lt;/p>
&lt;h2 id="まずwindowsをアップデート">
 まず、Windowsをアップデート
 &lt;a class="heading-link" href="#%e3%81%be%e3%81%9awindows%e3%82%92%e3%82%a2%e3%83%83%e3%83%97%e3%83%87%e3%83%bc%e3%83%88">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>実は、私はこれを忘れて数分溶かしました。&lt;/p>
&lt;blockquote>
&lt;p>WSL 2 is only available in Windows 10 builds 18917 or higher&lt;br>
&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install" class="external-link" target="_blank" rel="noopener">Microsoft - WSL2 Install&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>なるほど、Windows 10のビルド番号18917番以降を持っている必要があるのですね。&lt;br>
しかしながら、ただ、愚直にWindowsをアップデートしても、現段階では18917番以前のものになってしまいます。(バージョン確認にはwinverコマンドを)&lt;/p>
&lt;p>それを解決するために、&lt;a href="https://insider.windows.com/en-us/" class="external-link" target="_blank" rel="noopener">Windows Insider&lt;/a>に加入しましょう。&lt;br>
これは、Windowsの新しいバージョンをMicrosoftが配布し、問題を見つけたら報告するというシステムです。&lt;br>
試験的な内容をいち早く使うことが出来ます。&lt;/p>
&lt;p>Microsoftアカウントを持っていると登録は一瞬で終わります。なんと、&lt;strong>無料&lt;/strong>　です。&lt;/p>
&lt;p>続いて設定を開きます。そして&amp;quot;更新とセキュリティ&amp;quot;をクリック。&lt;/p>
&lt;img src="https://caphosra.net/images/wsl2-setup/settings.jpg" alt="Windows settings" class="center" width="900" height="300" />
&lt;img src="https://caphosra.net/images/wsl2-setup/windows-insider-program.jpg" alt="Windows Insider Program" class="center" width="300" height="600" />
&lt;p>&amp;ldquo;Windows Insider Program&amp;quot;をクリックして、ログインしてください。&lt;br>
Insiderの設定は&amp;quot;スロー&amp;quot;で問題ないと思います。&lt;/p>
&lt;p>続いて、&amp;ldquo;Windows Update&amp;quot;に移って、&amp;ldquo;更新プログラムのチェック&amp;quot;をクリック。
先程までなかった、より新しいWindows 10のバージョンへの更新ができるようになります!
これで、先程のWindowsバージョン問題は解決です。あとは、ひたすらWindows Updateを見る会です。&lt;/p>
&lt;h2 id="wslをインストールしていく">
 WSLをインストールしていく
 &lt;a class="heading-link" href="#wsl%e3%82%92%e3%82%a4%e3%83%b3%e3%82%b9%e3%83%88%e3%83%bc%e3%83%ab%e3%81%97%e3%81%a6%e3%81%84%e3%81%8f">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>WSLのインストール方法は通常の方法と同じなので割愛します。&lt;br>
以下のサイトがわかりやすかったです。(&lt;del>丸投げ&lt;/del>)&lt;/p>
&lt;p>&lt;a href="https://qiita.com/Aruneko/items/c79810b0b015bebf30bb" class="external-link" target="_blank" rel="noopener">Qitta - Windows Subsystem for Linuxをインストールしてみよう！ @Aruneko&lt;/a>&lt;/p>
&lt;p>本当にWSLのインストールと同じです。&lt;br>
WSLを既にインストールしているよ、という方はここをスルーしても大丈夫です。&lt;/p></description></item><item><title>Hugoで_index.mdの仕様を変更した話</title><link>https://caphosra.net/posts/hugo-index-override/</link><pubDate>Thu, 12 Mar 2020 10:35:31 +0900</pubDate><guid>https://caphosra.net/posts/hugo-index-override/</guid><description>&lt;p>今回は、Hugoについてです。&lt;br>
&lt;code>_index.md&lt;/code>は標準では限られたコンテンツしか含めないので、それを改造していきたいと思います。&lt;br>
そもそも&lt;code>_index.md&lt;/code>とは?というところにも触れるので、&lt;code>_index.md&lt;/code>と&lt;code>index.md&lt;/code>の仕様に疑問がある方は必見です。&lt;/p>
&lt;h2 id="hugoでの_indexmd">
 Hugoでの_index.md
 &lt;a class="heading-link" href="#hugo%e3%81%a7%e3%81%ae_indexmd">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>以下のようなフォルダがサーバー上にあったとします。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>- contents
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - old
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * index.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * old_content.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * index.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * content1.html
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * content2.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この時に、&lt;code>contents/&lt;/code>と&lt;code>contents/index.html&lt;/code>はアクセスしたときに同じ様に表示されます。&lt;br>
同様に&lt;code>contents/old/&lt;/code>と&lt;code>contents/old/index.html&lt;/code>も同じ表示となります。&lt;br>
これは、フォルダにアクセスしたときに、&lt;code>index.html&lt;/code>が存在するか探索されるからです。&lt;/p>
&lt;p>一方で、Hugoでは、&lt;code>index.md&lt;/code>と&lt;code>_index.md&lt;/code>というこれとほぼ同様の役割を果たすものをが用意されています。&lt;br>
ただ、これらは厳密には異なり、仕様が異なります。&lt;/p>
&lt;p>ひとつづつ見ていきましょう。&lt;/p>
&lt;h3 id="indexmdの仕様">
 index.mdの仕様
 &lt;a class="heading-link" href="#indexmd%e3%81%ae%e4%bb%95%e6%a7%98">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>&lt;code>index.md&lt;/code>はほとんど&lt;code>index.html&lt;/code>のようなものであると思ってもらってもいいです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>- contents
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - blog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>のようにファイルを配置すれば、ビルド後は、&lt;code>[servername]/blog/&lt;/code>とアクセスすることもできるし、
&lt;code>[servername]/blog/index.html&lt;/code>とアクセスすることも出来ます。&lt;/p>
&lt;p>ただ、&lt;code>index.md&lt;/code>には__落とし穴__が&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>- contents
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - blog
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * index.md &amp;lt;- NG (index.md被りは禁止)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * index.md &amp;lt;- OK
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * server.md &amp;lt;- NG (server/indexかのように扱われる)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - about
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> * index.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>このような配置をして、ビルドすると、&lt;code>server.md&lt;/code>と&lt;code>item/index.md&lt;/code>がビルドされません!&lt;br>
なぜかと言うと、&lt;code>index.md&lt;/code>は &lt;strong>下層ノードでの重複が禁止&lt;/strong> されているからです。&lt;br>
即ち、&lt;code>blog/&lt;/code>はもう既に&lt;code>index.md&lt;/code>を持っているので、子ディレクトリの&lt;code>index.md&lt;/code>はビルドされません。
Hugoは&lt;code>server.md&lt;/code>の様なファイルを&lt;code>server/index.html&lt;/code>にビルドしようとするので&lt;code>server.md&lt;/code>もビルドされません。&lt;/p></description></item><item><title>LLVMをWindowsで使いたくて入れたらlliなかった話</title><link>https://caphosra.net/posts/llvm-lli-install/</link><pubDate>Sat, 07 Mar 2020 12:54:53 +0900</pubDate><guid>https://caphosra.net/posts/llvm-lli-install/</guid><description>&lt;img src="https://llvm.org/img/LLVM-Logo-Derivative-1.png" alt="LLVM logo" class="center" width="256" height="256" />
&lt;p>オレオレ言語を作るためにAntlr4を習得(?)したcapra314cabraです。&lt;br>
今回は自分のWindowsのパソコンにLLVMを使える環境を作ろうとして手こずったのでそれの事について書いていきたいと思います。&lt;/p>
&lt;h2 id="まずllvmって">
 まずLLVMって?
 &lt;a class="heading-link" href="#%e3%81%be%e3%81%9allvm%e3%81%a3%e3%81%a6">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;blockquote>
&lt;p>The LLVM compiler infrastructure project is a set of compiler and toolchain technologies, which can be used to develop a front end for any programming language and a back end for any instruction set architecture.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/LLVM" class="external-link" target="_blank" rel="noopener">wikipedia LLVM&lt;/a>&lt;/p>
&lt;p>そういうことらしいです。LLVMのツール群の使い方は触れない予定なので、&lt;del>他のサイトをご覧下さい。&lt;/del>&lt;/p>
&lt;h2 id="最初にやったこと失敗談">
 最初にやったこと(失敗談)
 &lt;a class="heading-link" href="#%e6%9c%80%e5%88%9d%e3%81%ab%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8%e5%a4%b1%e6%95%97%e8%ab%87">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>取り敢えず、思考停止で&lt;a href="http://releases.llvm.org/download.html" class="external-link" target="_blank" rel="noopener">LLVMのリリースページ&lt;/a>へ&lt;br>
現時点でLLVM9.0.1が最新ですが、Pre-Built Binariesの何もなかったので、LLVM9.0.0のところにある&lt;code>Windows (64-bit)&lt;/code>をポチっとしてダウンロード。
インストラーだったので実行してインストール完了!&lt;/p>
&lt;p>&amp;hellip;と思いきや、Clang等はインストールされていたものの、&lt;code>lli&lt;/code>や&lt;code>llc&lt;/code>、&lt;code>llvm-as&lt;/code>などが見当たりませんでした。&lt;/p>
&lt;h2 id="次にやったこと失敗談">
 次にやったこと(失敗談)
 &lt;a class="heading-link" href="#%e6%ac%a1%e3%81%ab%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8%e5%a4%b1%e6%95%97%e8%ab%87">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Chocolatery(Windows用のパッケージマネージャ)を使ってLLVMを入れれば全部のせになるかな、という希望的観測でやってみると、ひとつ前と全く同じ&amp;hellip;&lt;/p>
&lt;h2 id="他の人がビルドしているものを貰う止めた">
 他の人がビルドしているものを貰う(止めた)
 &lt;a class="heading-link" href="#%e4%bb%96%e3%81%ae%e4%ba%ba%e3%81%8c%e3%83%93%e3%83%ab%e3%83%89%e3%81%97%e3%81%a6%e3%81%84%e3%82%8b%e3%82%82%e3%81%ae%e3%82%92%e8%b2%b0%e3%81%86%e6%ad%a2%e3%82%81%e3%81%9f">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>古いのばかり出てきました(LLVM3が多い印象)&lt;br>
LLVM9.0.0が使いたいのでうーん、といった感じ&lt;/p></description></item><item><title>[CTF] Nullcon HackIM 2020 writeup</title><link>https://caphosra.net/posts/hackim2020-writeup/</link><pubDate>Sun, 09 Feb 2020 17:54:45 +0900</pubDate><guid>https://caphosra.net/posts/hackim2020-writeup/</guid><description>&lt;p>Nullcon HackIM 2020に出たのでそのwriteupでも書こうかなーと思った次第です。&lt;/p>
&lt;p>結論から申し上げますと、解けた問題は&lt;strong>1&lt;/strong>問です&amp;hellip;(しかも、その問題はコピペするだけ)&lt;/p>
&lt;p>ただ、そんなのではwriteupとして意味をなさないので、競技終了後も作業していました。&lt;br>
結局ZeldaAdventureの最初の1問を解くことができたのでそれをここに載せます。&lt;/p>
&lt;h3 id="問題の見た目">
 問題の見た目
 &lt;a class="heading-link" href="#%e5%95%8f%e9%a1%8c%e3%81%ae%e8%a6%8b%e3%81%9f%e7%9b%ae">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;img src="https://caphosra.net/images/hackim2020-game.jpg" alt="Game scene" class="center" width="500" height="300" />
&lt;p>Unity製のGameで、このNPC(白い敵)を1体以上倒すとFlagを手に入れられる、とあります。&lt;br>
Playerは剣と体当たり(接触)することでNPCにダメージを与えられますが、敵のHPがとても高く、現実的な時間に倒せないようになっています。&lt;/p>
&lt;h3 id="やったこと">
 やったこと
 &lt;a class="heading-link" href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h3>
&lt;p>UnityのWindowsでビルドした時のファイル構成は決まっています。&lt;br>
特に、プログラマーが書いたコードは&lt;code>AssemblyCSharp.dll&lt;/code>というファイルにコンパイルされて存在しています。&lt;/p>
&lt;p>ここで、dnSpyを使用して&lt;code>AssemblyCSharp.dll&lt;/code>の中のコードを読んでみます。&lt;br>
コードの森を探索していると&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// Token: 0x06000006 RID: 6&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">private&lt;/span> &lt;span style="color:#76a9f9">void&lt;/span> &lt;span style="color:#aa89ea">TakeDamage&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">float&lt;/span> &lt;span style="color:#aa89ea">damage&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">this&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">health&lt;/span> &lt;span style="color:#abb2bf">-=&lt;/span> &lt;span style="color:#aa89ea">damage&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span> &lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">this&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">health&lt;/span> &lt;span style="color:#abb2bf">&amp;lt;=&lt;/span> &lt;span style="color:#d19a66">0f&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">base&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">StartCoroutine&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#76a9f9">this&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">ShowSome&lt;/span>&lt;span style="color:#abb2bf">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">base&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">gameObject&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">SetActive&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ダメージを処理している部分を見つけました。&lt;br>
HPが0になると&lt;code>ShowSome&lt;/code>というコールチンを回し始めるようです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-C#" data-lang="C#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// Token: 0x0600000A RID: 10&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">private&lt;/span> &lt;span style="color:#aa89ea">IEnumerator&lt;/span> &lt;span style="color:#aa89ea">ShowSome&lt;/span>&lt;span style="color:#abb2bf">()&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">this&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">textbox&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">SetActive&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">true&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">yield&lt;/span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">WaitForSeconds&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#d19a66">3f&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">this&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">textbox&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">SetActive&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">yield&lt;/span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#e5c07b">null&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">yield&lt;/span> &lt;span style="color:#76a9f9">break&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ShowSome&lt;/code>をみると&lt;code>this.textbox&lt;/code>を見せるようにしているみたいです。&lt;br>
これはこのTextBoxがFlagを持っているのでしょう。&lt;br>
dnSpyは実はDLLを編集する事が出来るので、この&lt;code>this.textbox&lt;/code>を最初から表示させるようにコードを書き換えれば、Flagゲットです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">Flag&lt;/span>&lt;span style="color:#abb2bf">:&lt;/span> &lt;span style="color:#98c379">REVOLUTIONSTARTSWITHME&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>フォントがおしゃれすぎて読みにくかったです(褒めてます)&lt;/p>
&lt;h2 id="おわりに">
 おわりに
 &lt;a class="heading-link" href="#%e3%81%8a%e3%82%8f%e3%82%8a%e3%81%ab">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>HackIM 2020の前に無力さを感じたので、もっと勉強してから出直します&amp;hellip;&lt;/p>
&lt;h2 id="参考">
 参考
 &lt;a class="heading-link" href="#%e5%8f%82%e8%80%83">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://github.com/xcsh/Unity-game-hacking" class="external-link" target="_blank" rel="noopener">Unity-Game-Hacking&lt;/a>&lt;/p></description></item><item><title>Powershellでsudoしてみたい話</title><link>https://caphosra.net/posts/powershell-sudo/</link><pubDate>Wed, 11 Dec 2019 22:28:26 +0900</pubDate><guid>https://caphosra.net/posts/powershell-sudo/</guid><description>&lt;p>今回紹介することはタイトルそのままです。&lt;br>
PowershellではBashの&lt;code>sudo&lt;/code>のように簡単に管理者権限で実行出来るようにするコマンドがありません。&lt;br>
そこで、それとほぼ同等なものを作りたい、というのが今回の話題です。&lt;br>
早速、始めて行きましょう。&lt;/p>
&lt;h2 id="手元の環境">
 手元の環境
 &lt;a class="heading-link" href="#%e6%89%8b%e5%85%83%e3%81%ae%e7%92%b0%e5%a2%83">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Powershell 6.2.3&lt;/p>
&lt;p>私が使っているPowershellはWindowsに標準でインストールされている.NET Framework依存のものではなく、
.NET Core依存のものです。これはWindowsだけでなくmacOSやLinuxでも動くのでWindows以外を使っている方もインストール出来ます。&lt;/p>
&lt;p>以降、Powershellの実行ファイル名をpwsh.exeとしていますが、.NET Framework依存のものをお使いの方は適宜powershell.exeで読み替えてください。&lt;/p>
&lt;h2 id="コマンドの実装方針">
 コマンドの実装方針
 &lt;a class="heading-link" href="#%e3%82%b3%e3%83%9e%e3%83%b3%e3%83%89%e3%81%ae%e5%ae%9f%e8%a3%85%e6%96%b9%e9%87%9d">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>&lt;code>sudo&lt;/code>と同等な機能をもった関数を実装し、&lt;code>sudo&lt;/code>という名前のAliasとして登録する。&lt;/p>
&lt;h2 id="方法">
 方法
 &lt;a class="heading-link" href="#%e6%96%b9%e6%b3%95">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>まず、Powershellを起動し、&lt;code>$profile&lt;/code>の値を読みます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">pwsh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># PowerShell 6.2.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Copyright (c) Microsoft Corporation. All rights reserved.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># https://aka.ms/pscore6-docs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># Type &amp;#39;help&amp;#39; to get help.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#dcaeea">$profile&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># C:\.....\Microsoft.PowerShell_profile.ps1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>続いて読んだパスのファイルを開きます。&lt;br>
お好みのソフトで開きましょう。因みに私はVisual Studio Codeで開きました。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">code&lt;/span> &lt;span style="color:#dcaeea">$profile&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>開けたら以下のようなコードを書きます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 管理者権限で実行する関数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">function&lt;/span> &lt;span style="color:#e5c07b">SudoRun&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic"># $programにコマンドを詰める&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">foreach&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#dcaeea">$arg&lt;/span> &lt;span style="color:#76a9f9">in&lt;/span> &lt;span style="color:#dcaeea">$args&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#dcaeea">$program&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#63c381">&amp;#34;&lt;/span>&lt;span style="color:#dcaeea">$program&lt;/span>&lt;span style="color:#63c381"> &lt;/span>&lt;span style="color:#dcaeea">$arg&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#8a93a5;font-style:italic"># Powershellにより管理者権限で実行&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#aa89ea">pwsh&lt;/span> &lt;span style="color:#aa89ea">-command&lt;/span> &lt;span style="color:#63c381">&amp;#34;Start-Process -Verb runas &lt;/span>&lt;span style="color:#dcaeea">$program&lt;/span>&lt;span style="color:#63c381">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic"># 関数をAliasとして登録する&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">Set-Alias&lt;/span> &lt;span style="color:#aa89ea">-Name&lt;/span> &lt;span style="color:#aa89ea">sudo&lt;/span> &lt;span style="color:#aa89ea">-Value&lt;/span> &lt;span style="color:#aa89ea">SudoRun&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これを書いたら、そっとそのファイルとPowershellを閉じましょう。&lt;br>
その後、Powershellを起動すると、もうあなたは&lt;code>sudo&lt;/code>をPowershellで使うことができます!&lt;/p></description></item><item><title>[競プロ]役に立つCompareマクロ</title><link>https://caphosra.net/posts/comparemacro/</link><pubDate>Sun, 08 Dec 2019 22:24:27 +0900</pubDate><guid>https://caphosra.net/posts/comparemacro/</guid><description>&lt;h2 id="tldr">
 TL;DR
 &lt;a class="heading-link" href="#tldr">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>任意の方法で変数を比較する型を一行で作るためのマクロ&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">#define C(t, f) struct C##t { constexpr bool operator()(t const &amp;amp; a, t const &amp;amp; b) const noexcept { return f(a, b); } }
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>structの型名とマクロ名はお好みの名前に付け直してください。&lt;/p>
&lt;h2 id="マクロの説明">
 マクロの説明
 &lt;a class="heading-link" href="#%e3%83%9e%e3%82%af%e3%83%ad%e3%81%ae%e8%aa%ac%e6%98%8e">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>競技プログラミングで見かける&lt;code>greater&amp;lt;T&amp;gt;&lt;/code>と&lt;code>less&amp;lt;T&amp;gt;&lt;/code>という型。&lt;br>
この&lt;code>greater&amp;lt;T&amp;gt;&lt;/code>は大なり記号、&lt;code>less&amp;lt;T&amp;gt;&lt;/code>は小なり記号と同じ意味を持っています。&lt;br>
これらは、たとえば逆順のPriorityQueueを使うときに用いられます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// このPriorityQueueは小さい順に出てくる
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#aa89ea">priority_queue&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">vector&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">greater&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">pq&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// この二つは同じ動作をする
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#aa89ea">priority_queue&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">vector&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">less&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">pq&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">priority_queue&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">pq&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、これだけしかないと問題が生じます。&lt;br>
たとえば、&lt;code>pair&amp;lt;int, int&amp;gt;&lt;/code>型で&lt;code>second&lt;/code>の要素が小さい順に出すPriorityQueueが必要だとします。&lt;br>
この時に&lt;code>greater&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&lt;/code>だと&lt;code>first&lt;/code>の大小関係が優先され期待通りとなりません。&lt;/p>
&lt;p>ではどうすればよいか。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">struct&lt;/span> &lt;span style="color:#ca72ff">ComparePair&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">constexpr&lt;/span> &lt;span style="color:#e5c07b">bool&lt;/span> &lt;span style="color:#00b1f7">operator&lt;/span>&lt;span style="color:#abb2bf">()(&lt;/span>&lt;span style="color:#aa89ea">pair&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#54b1c7">&amp;amp;&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">pair&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">int&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#54b1c7">&amp;amp;&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">)&lt;/span> &lt;span style="color:#76a9f9">const&lt;/span> &lt;span style="color:#76a9f9">noexcept&lt;/span> &lt;span style="color:#abb2bf">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">if&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">second&lt;/span> &lt;span style="color:#54b1c7">==&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">second&lt;/span>&lt;span style="color:#abb2bf">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">first&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">first&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#76a9f9">return&lt;/span> &lt;span style="color:#aa89ea">a&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">second&lt;/span> &lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">b&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">second&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#abb2bf">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#abb2bf">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上のように自前で比較をする型を作ればいいのです。
こうすれば、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c++" data-lang="c++">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 名前を簡略化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#8a93a5;font-style:italic">#define P pair&amp;lt;int, int&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// このように書けばsecondで順番が決定する
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">&lt;/span>&lt;span style="color:#aa89ea">priority_queue&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">P&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">vector&lt;/span>&lt;span style="color:#54b1c7">&amp;lt;&lt;/span>&lt;span style="color:#aa89ea">P&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">ComparePair&lt;/span>&lt;span style="color:#54b1c7">&amp;gt;&lt;/span> &lt;span style="color:#aa89ea">pq&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>secondが小さい順に値が出てきます。&lt;/p></description></item><item><title>C#でのusingの使い方を4つ紹介</title><link>https://caphosra.net/posts/csharp-using/</link><pubDate>Sat, 16 Nov 2019 16:40:39 +0900</pubDate><guid>https://caphosra.net/posts/csharp-using/</guid><description>&lt;p>今回はC#で欠かせない存在の&lt;code>using&lt;/code>の使い方を四つに分けて紹介したいと思います。&lt;br>
早速、始めていきましょう!&lt;/p>
&lt;h2 id="ディレクティブとしてのusing">
 ディレクティブとしてのusing
 &lt;a class="heading-link" href="#%e3%83%87%e3%82%a3%e3%83%ac%e3%82%af%e3%83%86%e3%82%a3%e3%83%96%e3%81%a8%e3%81%97%e3%81%a6%e3%81%aeusing">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>C#でusingと言えば最初に思い浮かべるであろう使い方は、やはりディレクティブとしての&lt;code>using&lt;/code>でしょう。
usingディレクティブと聞いてピンと来なかった方も以下のコードを見ればわかるはずです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// これがディレクティブとしてのusing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">using&lt;/span> &lt;span style="color:#ca72ff">System&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>この&lt;code>using&lt;/code>は、異なる名前空間の中にあるモジュールを短い名前で呼び出す為に使用されます。
例えば、ファイルの読み書きをストリームで行いたいときに&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Text&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Encoding&lt;/span> &lt;span style="color:#aa89ea">enc&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Text&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Encoding&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">GetEncoding&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;UTF8&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">IO&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">StreamWriter&lt;/span> &lt;span style="color:#aa89ea">writer&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">IO&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">StreamWriter&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;./some_file.txt&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">enc&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>と書くことはできますが、これでは余りにも冗長で可読性が低くなってしまいます。&lt;br>
こんな時こそ&lt;code>using&lt;/code>です。&lt;br>
&lt;code>using&lt;/code>を使えば名前空間を省略できます。先ほどの例であれば&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// ファイルの先頭にこれらを書く&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">using&lt;/span> &lt;span style="color:#ca72ff">System.Text&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">using&lt;/span> &lt;span style="color:#ca72ff">System.IO&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// Before&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Text&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Encoding&lt;/span> &lt;span style="color:#aa89ea">enc&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Text&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Encoding&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">GetEncoding&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;UTF8&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">IO&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">StreamWriter&lt;/span> &lt;span style="color:#aa89ea">writer&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">IO&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">StreamWriter&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;./some_file.txt&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">enc&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// After&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">Encoding&lt;/span> &lt;span style="color:#aa89ea">enc&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">Encoding&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">GetEncoding&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;UTF8&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#aa89ea">StreamWriter&lt;/span> &lt;span style="color:#aa89ea">writer&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#76a9f9">new&lt;/span> &lt;span style="color:#aa89ea">StreamWriter&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#98c379">&amp;#34;./some_file.txt&amp;#34;&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#e5c07b">false&lt;/span>&lt;span style="color:#abb2bf">,&lt;/span> &lt;span style="color:#aa89ea">enc&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>なんということでしょう。あんなに読みにくかったコードがこんなに簡潔に!
(今回の内容とは関係ないですがvarを使うともっと読みやすくなります。)&lt;/p>
&lt;h2 id="忘れられがちなusing-static">
 忘れられがちなusing static
 &lt;a class="heading-link" href="#%e5%bf%98%e3%82%8c%e3%82%89%e3%82%8c%e3%81%8c%e3%81%a1%e3%81%aausing-static">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>先程の&lt;code>using&lt;/code>の派生として&lt;code>using static&lt;/code>というものがあります。これは クラス名を省略できるようにする為に使われます。例をあげます。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-c#" data-lang="c#">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// ファイルの先頭にこれを書く&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#76a9f9">using&lt;/span> &lt;span style="color:#ca72ff">static&lt;/span> &lt;span style="color:#aa89ea">System&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Math&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// 半径10の円と同じ面積の正方形の一辺の長さを求めたい&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// Before&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">double&lt;/span> &lt;span style="color:#aa89ea">radius&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">10d&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">double&lt;/span> &lt;span style="color:#aa89ea">ans&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">Math&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">Sqrt&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">radius&lt;/span> &lt;span style="color:#abb2bf">*&lt;/span> &lt;span style="color:#aa89ea">radius&lt;/span> &lt;span style="color:#abb2bf">*&lt;/span> &lt;span style="color:#aa89ea">Math&lt;/span>&lt;span style="color:#abb2bf">.&lt;/span>&lt;span style="color:#aa89ea">PI&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8a93a5;font-style:italic">// After&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">double&lt;/span> &lt;span style="color:#aa89ea">radius&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#d19a66">10d&lt;/span>&lt;span style="color:#abb2bf">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e5c07b">double&lt;/span> &lt;span style="color:#aa89ea">ans&lt;/span> &lt;span style="color:#abb2bf">=&lt;/span> &lt;span style="color:#aa89ea">Sqrt&lt;/span>&lt;span style="color:#abb2bf">(&lt;/span>&lt;span style="color:#aa89ea">radius&lt;/span> &lt;span style="color:#abb2bf">*&lt;/span> &lt;span style="color:#aa89ea">radius&lt;/span> &lt;span style="color:#abb2bf">*&lt;/span> &lt;span style="color:#aa89ea">PI&lt;/span>&lt;span style="color:#abb2bf">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本来、&lt;code>Math.Sqrt&lt;/code> &lt;code>Math.PI&lt;/code>と書かなければならない所をこんなにも簡潔に書く事ができます。
&lt;code>using static&lt;/code>はその名前の通りstaticなメンバについてのみクラス名を省略できるようになります。
(そうでなかったら色々やばそうですが&amp;hellip;)&lt;br>
因みにこの機能はあまり使わない印象です。使うのであれば&lt;code>System.Math&lt;/code>か&lt;code>System.Console&lt;/code>位でしょうか。&lt;/p>
&lt;h2 id="名前を変えるusing">
 名前を変えるusing
 &lt;a class="heading-link" href="#%e5%90%8d%e5%89%8d%e3%82%92%e5%a4%89%e3%81%88%e3%82%8busing">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="見出しへのリンク">&lt;/i>
 &lt;span class="sr-only">見出しへのリンク&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>ある日、caphosra君は以下のようなを実装しました。&lt;/p></description></item></channel></rss>